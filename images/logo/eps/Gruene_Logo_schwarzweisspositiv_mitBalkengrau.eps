%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Gruene_Logo_1c.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Tatjana
%%CreationDate: 4/29/08
%%BoundingBox: 0 0 200 121
%%HiResBoundingBox: 0 0 199.5586 120.2178
%%CropBox: 0 0 199.5586 120.2178
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x409 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 80 8%%BeginData: 8752 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDE2FFA8A8FD0BFFA8A8FD71FFA826%A8FD09FFA8F87DFD6DFFA8A8FFFF7D27F8A8FD07FF7DF82752FD6EFFF87D%FF7DF827F87DFD05FF52F827F827FD06FFA8FD66FF7D27F87D2727F8F8F8%7DFFFFFF52F8F8F827F8A8FFFFA852F852FD66FF52F827F827F827F827F8%FFFF7DF827F827F827A8FF7D27F82752FFFFFF7DA8FD61FF27F8F827F8F8%F827F8F852FF27F8F827F8F8F8FF7DF8F827F87DFFFF27F87DFD61FF27F8%27F827F827F827F8277D27F827F827F8275227F827F8277DA82727F8A8FD%59FF7D27277D7DFFFFA8F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827%F8F8F827F827F827F8F8A8FD5AFF2727F82727A8A827F827F827F827F827%F827F827F827F827F827F827F827F827F827F82727FD5BFF7DF8F8F827F8%27F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F8%52FD5CFF27F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827A8FD5CFF7DF8F827F8F8F827F8F8F827F8F8F827F8%F8F827F8F8F827F8F8F827F8F8F827F8F852FD5EFF2727F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F82726FD05FFA85227%FD51FFA852A8A8A8FFA8F8F8F827F8F8F827F8F8F827F8F82727F8F8F827%F8F8F827F8F8F827F8F8F8A8FFA87D7D27F8F852FD51FF7D27F8FD0527F8%27F827F827F827F827F827F87D2727F827F827F827F827F827F827F82727%27F827F827F8277DFD4FFF7D2727F827F8F8F827F8F8F827F8F8F827F8F8%F827F8F8527D27F8F82727F8F827F8F8F827F8F8F827F8F8F827F8F8F8FD%50FFA827F827F827F827F827F827F827F827F827F82752A852A8FFFF527D%A852F87D5227F827F827F827F827F827F827F87DFD51FF5227F8F8F827F8%F8F827F8F8F827F852F827F8A8FD08FF7D7DFF27F827F8F8F827F8F8F827%F8F8F827FD53FF2727F827F827F827F827F827F827527D52FD0CFFA8F827%2727F827F827F827F827F827A8FD50FFA87D2727F8F8F827F8F8F827F8F8%F827F8F87DFD0DFFA8527D52F8F8F827F8F8F827F827A8FD52FF2627F827%F827F827F827F827F827F8277DFD10FF7DF8522727F827F827F87DA8FD53%FF7DF8F8F827F8F8F827F8F8F827F8F827FD11FF7D525227F826F827F827%F827272752A8FD50FF52F827F827F827F827F852F8527DFD14FFA87D52F8%27F827F827F827F827F8277DFD4FFF27F827F8F8F827F8F8277C7DFD16FF%52F8F8F827F8F8F827F8F8F827F8F827FD4FFF52F827F827F827F827F852%FD15FFA827527D52F827F827F827F827F827F82727A8FD1FFFA8FD2EFFA8%5227F8F8F827F82752FD15FFA827F827F8F8F827F8F8F827F8F8F827F8F8%7DFD20FFA852A8A827A8FD2CFFFD05A8FD17FF2727F827F827F827F827F8%27F827F82727FD21FF7DF87D5227A8FD48FF52F827F8F8F827F8F8F827F8%F8F82727A8FD19FFA8FFA8FD05FFA8A8FFA87DFFFFFFA8FFFFFFA8FFFFFF%A8FD07FFA8FFFFFFA8FFFFFFA8FD2DFF7E52F827F827F827F827F827F852%7DFD1AFF52F8F827F852A8FF27F827FF272727FF27F827FF52F8F8A852F8%F82727A8FFFFF8F852FF27F827FF27F827FFA852F82752FD05FF5227F827%7DFFFFFF5227F852A8FD13FF5227F8F8F827F8F8F827F8F8F8277DFD1BFF%51F827F827F87DFF27F852FF27F852FF27F827A852F827FF27F827F82727%FFA827F852FF27F852A827F87CFF27F827F852FD04FF5227F827F827FFFF%2727F827F852FD13FFA8F827F827F827F827F827F827F82759FD1AFFF8F8%27A8F8F852A8F8F852FFF8F852FFF8F8F87D27F827FFF8F8F827F8F87DA8%F8F8F8A8F8F852A8F8F87D7DF8F8525152FFFFFF7DF8F87D52F8F8A87DF8%F85227F8F8FD14FF7CF8F8F827F8F8F827F8F8F827F8F827FD18FFA827F8%525227F8A87D27F8A87D27F8A8A827F8275227F87DA827F87D7D27F87D52%27F8275227F8A87D27F8A85227F87DFD05FF7DF827FF7DF827A852F827FF%52F827A8FD13FF2727F827F827F827F827F827F827F8277DFD17FF7DF827%F8F8F852FF52F827A87DF827A87DF827F827F8277DA8F8277DA8F8275252%F827F827F827A87DF827A87DF827F87DFD04FF5227F852F82727A8F82752%FF2727F8FD12FFA827A82727F8F8F827F8F8F827F8F8F82727A8FD17FF7D%27F827F82752FF272727FF5227F8FF52272727F827F8A87D27F8FF7D27F8%7DFD0427F827F8FF512726FFFF52F827F8FD04FFA8F827F827F87DA827F8%7DFF27F852FD11FFA87D2727FF2727F827F827F827F827F8277DFD19FF52%F827A852F827A827F827FF27F827FF27F85227F8F827A852F827A827F827%A827F85227F8F827A827F852A8FFFF27F8F8A8FD04FFA85227F827FF7DF8%277DA8F82752FD11FFF827F8F82751F8F8F827F8F8F87D7DA8A8FD1AFF27%27F87D2727F8FF2727F852F82727FF2727527DF82726FF2727F852F82752%FFF8277D52F82727FFF827527D2752F82727FD06FF7DF8277DFFA827F827%2727F8FD12FF7DF827F827F827F827F827F82752FD1CFFA827F8F8F827F8%7DFF52F8F8F827F8A8A827F87D7D27F827A827F8F8F82727FF7D27F8A852%27F8527D27F87D5227F8F8F8A8FD05FF7DF82752FFFFFF27F8F827F87DFD%10FF52A85252F827F8F8F827F8F8F827F8F852FD1CFF2752275252A8FFFF%A852272727A8FFA82727A8FF27277DFF275227527DFFFFA82752A8A82727%A8FF2752A8A8275252FD07FF275252FD05FF525252A8FD06FF527DFFFF7D%FFFFFF527DFF2727277D27F827F827F827F827F827F8277DFD26FFA8FD1A%FFA852FFA87DA8FD1BFF5227F8FF522751A8A827F8522727F827F827F827%F827F8F8F827F8F8F827A8FD40FF52277D52F8A8FD1AFFA827F8275227F8%27277D2727F827F827F827F827277D2727F827F827F827F852FD1FFFA8FD%20FFA87DFF7EA8FD1BFF27F8F8F827F8F8F8272727F827F8F8F827F8F8F8%27A8FF5227F8F8F827F8F8F8FD19FF522752277DFFFFFF52277DFF522752%2752FD07FF7D27527DFFFFA8275227527DFFFF7D527DFF7D527DFF7C277D%FF7D2752A87D27522752A87D2752FFA82752A8FFFFA8F827F827F827F827%F827F827F827F827F827F827F852FFFFFFA852512727277DFD19FFF8F8F8%27F852FFA8F8F852A8F8F8F827F8FD05FFA827F8F8F82752FF5227F8F8F8%277DFFF82727FFF82727FFF827F8FF2727F8FFF827F8F8F8A827F8F8A852%F8F8A8FFFF2727F8F8F827F8F8F827F8F8F827F8272727F8F8F827F8FD07%FFA8FD1AFFA827F827F827F8A8A827F87D7D27F852527DFD05FF52F82727%27F852FF52F8277D27F852A827F87DA827F87DA827F827A827F852A827F8%527D7DA827F8277D7DF827A8FFA827F827F827F827F827F827F827F827F8%7D5227F827F8277DFD21FF7DF8277D7DF8277D7DF8277D7DF8277DFFA8FD%04FFA8F8F827FF7DA8FFFFF8F827FFF8F8277DF8F87DA8F8F87DA8F8F8F8%7D27F852A8F8F852FFFFA8F827F852272727FFFF7DF8F8F827F8F8F827F8%F8F827F8F8F82727FF5227F8F8F852FD21FF7D27F8A8A827F87D5227F8A8%5227F827F8FD05FF5227F8A87D52527DA827F8522727F8A87D27F8FF7D27%F8FF7D27F8272727F8A87D27F827F8A8A827F8272727F852FFFF5227F827%F827F827F827F827F827F827F827A8FF5227F82727FD21FF52F827A87DF8%277D52F827A827F827F8F8A8FD04FF52F8277D27F8F827A8F8F8F827F87D%FF52F827A852F827A852F827F827F8F87D7DF8F8F827A87DF827F8F8F827%52FFFF51F8F8F827F8F8F827F8F8F827F8F8F827F8A8FFFF52F8F8277DFD%20FF272727FF2727F8FF272727FF272727A8A8FD05FF2727F8FF5227F87D%7D27F827F827FFFF272727FF272727FFFD0427F827F8FF522727A8A8FF52%272752F827F8A8FFFF2727F827F852F827F827F827F827F827F8277DFFFF%FFA852F87DFD1FFFA827F8272727F852A827F852A827F8517DA8FD05FF52%F8275252F827A87DF82752F8F87DFF27F82752F8F852A827F85252F8F827%A827F8277DA8A851F8525227F8F8A8FFFF27F827F8527D27F8F8F827F8F8%F827F8F8F87DFD05FFA8A8FD20FFF827F827F852FFA8F8277DA8F827F827%27FD05FF7D27F827F82752FF272727A8F82752FF2727F827F827A8FFF827%7DA8F82727FFF827F827F8FF272752A8F827F8FFFFFF2727F827A8FFF827%F827F8527D27F827F827A8FD26FF7D27F827277DA8FF7D27F8A87D27F827%F87DFD06FF5927F82752FFFF27F852FF27F827FFA8F827F8277DFF7DF8F8%A8A827F87DA827F827F852A827F87DFF27F827FFFFFF27F8277DFFFF27F8%F8F82752FF5227F8F8F8FD28FFA8FD07FFA8FFFFFFA8FFA8FD0FFFA8FFA8%FFFFFFA8FFFFFFA8A8FD04FFA8FD07FFA8FFA8FFFFFFA8FFFFFFA8FD05FF%272727FFFFFF5227F827F87DFFFF2727F852FD6DFFA827F8FD04FF7DF827%F827A8FFFFA8F82752FD6EFF52A8FD04FFA827F82752FD04FFA827FD28FF%FD43A8FD0BFF2727F8A8FD2DFFA8A87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD0BFF7DF8A8FD2FFF%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D%7DA8FD057DFD0BFFA8A8FD2FFFA8A87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD3DFFFD43A8FDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFD46FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-04-29T16:55:24+02:00</xap:CreateDate>
         <xap:ModifyDate>2008-04-29T17:37:57+02:00</xap:ModifyDate>
         <xap:MetadataDate>2008-04-29T17:37:57+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>156</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhNV1fS9IsXv9UuorKyjZEkuZ2CRqZXEacmOwq7A&#xA;Yqw385/zGufIHlGHXrWCK6ka9gt/q8pIEiOGd1VlPwtwQ0O9PA4qmv5f/mN5Y89aJHqeiXKs/EfW&#xA;7F2H1i3c9UlQGo36N0btirKMVeTfm/8A85B+WvI0E+nac8eq+aQOKWKktDbsejXTKRSnXgp5H/JB&#xA;rirPvJPmRPM3lHR9fRVQ6laRXEka7qkjKPUQV/leq4qneKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4B/zmLr72nkvR9EjbidUvWmkH80VolSvy5zIfoxV81a&#xA;n+YnmrVfJth5R1G6+s6Rpk4uLESCssdEaNY+fdFDniD06DagxVD+SvOeu+TvMNtruizmK5gNJI6/&#xA;u5oiRzilX9pGp/EbgYFfU/5zfn1Hp35Z6PqHlef0tU81w87SUEF7WFQBcN/xkRz6Y96kfZwq+PZJ&#xA;JJJGkkYvI5LO7Ekkk1JJPUnAr6t/K782vLn5f/kDo95q0puL15L1NN0qNh60xFzIdq14Rgn4nIoP&#xA;c0BKvMY/zv8AzH88/mHoNrPqUthpt1qlnCmlWEj28PCS4ReEjIVeStdy7fIDFX0v+Z/53eTfy/gM&#xA;V7L9e1pl5QaRbsPV36NK24iX3bc9gcVZpoWpNqmiafqbQm3a+tobk25PIxmaMPw5UWvHlStBiqNx&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVhv5u6V5n1DyJqB8r39xYa7ZAX&#xA;lk1q5RpTCCWgNPtCRKgKduVMVfKflr/nKH819HnQ3l9FrVoD8dtexJUjvSWIRyV+ZPyxVZ+fP5t6&#xA;T+Y48vXdhBLZyWMNwl5ZTfEY5ZWQ1WQfC6EJsaA7bgbYq8nwK7FUTc6je3VtaW08zSW9hG0VpGfs&#xA;xo8jTMAPd5GOKobFV7zSyLGjuzrEvCJWJIVSxfioPQcmJ27nFVXT9QvNOv7fULKUwXlpIk9tOtOS&#xA;SRsGR1rXdWFRiqN0fTtV80eZ7PTxJJc6lq91HCZ5WMjtJM4Bd2YknrUk4q/R+1torW1htoRxigRY&#xA;418FQBR+Awqq4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUPqWoWmm6fdajeO&#xA;UtLOJ7i4dUaQrHEpdyEQM7UUdFBOKsKsPz5/KC+AMPmi0Su49f1LftX/AHckeKvkv8+vLvlzTPPU&#xA;+o+WdRstR0PWuV5AbGeKdIZi37+I+kzBaOeS9qGg6HFXm+BXYq7FUTqGm3unTpb3kfpSvDBcqpIN&#xA;YrqFLiFtiftRSq304qhsVdirsVe9f843ad5F8u3jedfN+uafY3ao0ei6fNOnrqHHGS5aIEutVJSO&#xA;o3BY+Bwq9a8y/wDOVv5W6XDINMludcugD6cdtC8UZbwaScR0Huqtiqb/AJF/mX5l/MPTdX1vVLO3&#xA;sdOhultdMggDlqonOUySOx5n94gqqqPbFXp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2Kvn/wD5yotPPmmadb+ZfL2tahaaQwFnrNjbXEscaFj+6mohFA9fTf8A2PicVfI2BXYq7FUx&#xA;l0HUE0mDV409fT55DAZovi9Ocb+jKOqOV+Ja7MOlaGir3j8vP+cUpfMHkqHUvMF3caHrF1OZYIPT&#xA;EhW04UUSxMUKu7fF12HUVOxV6P5g/wCcW/KGr6JFb/X7iPXILK1sIdXdQ6hLT4Vc26tGGZogIz8f&#xA;QCneqrBvOX/OJFzZeVrGHypMNW18XJOo3dy4tg0LLRRFESyKqtuasW9+2KvGvzT8oaV5R80r5X06&#xA;dr670+CFNUu96SXko9R1iUdERXVQOta1PYKsNIINDsRgV2KozRtH1LWtVtdJ0yBrrUL2RYbaBBuz&#xA;sfwA6knYDc4q/Qj8uPJdt5M8l6Z5dgYSNZxVuZht6k8hLyv8i7GntTCrJcVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVfJ3/ADlZP+Yuk+YiP0veHydrUS+haRuyW6yIoWW3kCcQ1Svq&#xA;AN1r7HFXzvgV2Ko3StE1rV5pIdJ0+51CaJDLLFawyTssYIBdljDELVgK4q+xf+cbfykl8oeXv05q&#xA;izwa7rMK/WbCRwY4olkLw1jCqVk4kEhiSvtuMKvZ8VdirsVeK/nH+Ttzepdav5F0m1TzJrEwXWNU&#xA;mkf1YoONHe2Q81R36O0a8yNlBLHFXy550/LvWPLJSSS3vfqNAj317ZS6dHJOCeSW6XPGWVAvE8ii&#xA;nr8IpXFWKxCIyL6pYR1+MqAWp7AkYFe2flN+cP5VeQS00Ple/m1OVeE2rSTwzz8TuyxoVhSNa9hu&#xA;e5NMKvonyT+fP5aecJktdP1P6pqMm0en36i3lYnoqElo3b2RycVehYq7FXYq7FXYq7FXYq7FVlxc&#xA;QW8ElxcSLDbwq0k00jBURFFWZmNAAAKknFUgP5i+Qxoa66dfsBo7TfVlvjcR+kZx/uoNX7dN6eG/&#xA;TfFWQRyRyxrLEweNwGR1IKspFQQR1BxVdirsVdirsVdirsVdirsVSjzX5T0HzXodxomuWq3VhcDd&#xA;TsyOPsyRsN1dexH6sVfK3nX/AJxH87addSS+Vp4tb08kmKGR0t7tR4OJCsTU/mDiv8oxV57dfkl+&#xA;bVtJ6cnlXUGbxii9Vdv8qMuMVe0/kB5I/Nu282WmoeaNJWHSLRJP9N1FEXUVYxlUSCUUuuNaBkkP&#xA;p8a7Vpir6ZxV2KuxV2KuxV8Y/wDOQ11pkf5pahB5kg1i/ZPTa0ZbqG0gS1dQyrbI1vc1QbgtUVYG&#xA;u9cVeM3bWjXczWaSRWhkY28cziSRYyTwV3VY1ZgvVgor4DAqlirsVfW//OKHnnzz5gsNS0vV5Bfa&#xA;Lo6xrbX87MblXlrxgDEH1EVUJ+I1XYbggAq+gsVdirsVdirsVedfnP8AnBF+Wmm6bdnS/wBKzajM&#xA;8SQev9X4rGnJn5enNXdlFKYq8x07/nNHTZLpF1HyrNbWpI5y294tw4HciN4YAf8AgsVZX+dn52+X&#xA;NE8raVB+iv8AEOk+crKdiFuWsyLV44wDy9KVquJvYrTFXmPnO+/LLQvyl8kwz+UJpbXW5bnVY7Fd&#xA;TaOaNl9OMvJOIG9QTRlP2FoBt0xV6Jr3/ORlv5W/L/yhraeWV/3PxT/VtJS84LbQWjLGlJfq55cl&#xA;ZaDgKe9MVRWt/wDOSdjpv5Z6D51i0X6zNrVzLbNpf1rgYTAZBITN6LcqFFoOA2bFUNrX/OTX6K/L&#xA;/wAvebZfLfKTzDNdRwad9doUitH9NpPV+rnlVqbcB88VS3yv/wA5h+WdR1KG01zRJtGgmYJ9cSdb&#xA;qNKmgaQenAwXxIBxVlv5yfnzbflxc6TbxaSNabVIpJ+S3Qt1SNCoQgiKfnz5Hw6d64qlvmz/AJyT&#xA;sdC8jeVvNEGi/Xm8zLMwsvrfpegbYqsw9T0ZOfGRuP2RiqF8z/8AOTn6A8peVtdk8t+tceZYrm4N&#xA;gL3j9XjglEcZ9X6uefqhq/ZFPfFU81f/AJyE8vaH+X2i+aNZsng1HXYTPY6DDIJZSnIgOZGWIBON&#xA;DyK96AHFUJ+Un/ORNr+YfmSXQl0GXTpkgkuVnFwtwnpxsqnn8EJUkuOlcVeo6/r+k+X9HutY1e4W&#xA;106yQyXE79AOgAA3LMTRQNydsVeB33/OZugx6j6Vl5aubjTgxBupLlIZSo6MIQkg38DIMVew2X5o&#xA;eTrryEnnprz6voBiMjySikiMrGNoii8iZOY48RWp6Yq8ek/5zO8vjVPSTy3dPpfKn1s3EYn416iD&#xA;gVrTt6uKvftC1vTdd0az1jTJfWsL+JZ7eTpVXFdx2I6EdjiqOxV2KuxV2Kvh/wD5yB81aNqnn7Xb&#xA;V/LQsNWs7l7V9Ta5nMkywHhHKYW/dKroAy0X7J698VeTYFdirNvyk8t+RPMPmpNN846vLpFlIv8A&#xA;ozx8EWWWopG878liqO5XfpUGlSr7t8r+VfL3lfR4dJ0GyjsrCLcRx7lmI3d3NWdjTdmJOKptirsV&#xA;dirsVdir5N/5zM1YS+afL2kg1+p2Ut0R4G6l4f8AYtirx6+1e68wzeX9C1L6nolrpUC2Ed08MiBU&#xA;dzI01yyLJKxLNXYUHgNzirNv+ckYbfSvMXl7yraT/WLXy5odpZiU9XkJZmeg2HNeBxVU/wCckv8A&#xA;cfq/lTywuyaB5fs7d0pSkzcg/vuqJ1xVv/nIaOS0v/JXlKIVfRtAs4XTkP8AeiWquD2BPpqTirzi&#xA;98wXE3lLTfLsnILpt7e3QDdhdR26Baf5LQOf9lgVnv54/wC4/RPy88t9Dp3l+G7mSlOM1+xeUEeN&#xA;Yt8KoL86vJ+h+V28pWlhD6Go3Wg2lzrCA1DXDAq0lKmhYqa08K9a4qofm9fahe6j5T0uYNJeab5c&#xA;0q0aEAs/qSw+uqlQK8+M6jFWLal5imvvLGi6NIzFdGkvPRU04iO6aOTY+PMNXFWd/wDOQdbLWPLH&#xA;lsGg8v8Al6wtJUrWk7KXkJp0JBWuKpl/zkj5J1/Q73y3PNC7aJbaNZaZbTgExxS2qESRMezE/GK/&#xA;aqfA4q9b/wCcaNW8keY45tW0/RbfRfNWk2cemaoLNFiguYJWV0uAigfGzwHl+JO1FVT/AJy/XUz+&#xA;W1kbYObNdTiN+U6BfSkEfOn7PqEe1ae2KvmzUPOPl6X8qNL8oWmmGLWYNSl1HU9UZUHqDg8cSIwJ&#xA;c/BIOQNAOIpWuyrIfzB/S/l78pPI/lS5YwtqP1nXr22rvSZwtoGHUUj5MQe59sVRv5q+UvL3lz8o&#xA;Py7MFpFHrurRS393eBFE0qTRxy8ZH+0QnrIqg9KfOqr6P/5xxgnh/Jby0kwIcpcuAf5JLyZ06/5L&#xA;DFXpOKuxV2KpN5o81aV5esXlu54ReyRTyadp8kyRS3ckEZf0YeZ+JjsNgeuKvjf80tRn/Mmyf8wN&#xA;MfkLBUg1zRnWI3FgGNI5FlRI3ntnb7LPujbdMVeT4FdiqO0bQta1u+Sw0exnv7yQgLBbxtI2/c8Q&#xA;aD3O2Kvu/wDJPyz5y8s+QbTR/Nlylxf27v8AV0RzIYLYgFIHkP2yjcumwFFGwwqzzFXYq7FXYq7F&#xA;Xxj/AM5IaH5w1z82dUmstE1C6srWK2tra4itp5I2VYVduLKhWnqSMNsVQNv+Xn5sfmt52S+1bRpt&#xA;Kt5PRhuryW2ktLa3toVCcYhL8UjKg2WrEnqab4qnX/OSn5cecbX8w5vMdhp9ze6PdxWv1a4gjadY&#xA;Xt4Ug9OQKG4msfIVFDXxriqV+Vfy8/Mv82PzCXXPMlnPDZySxSarqNzAbeEwwBV9GFSqqzFFChV+&#xA;bYqm35k+V/NPmj/nIppBpF62kvqdjaC7NtL6CwQ+lHK/qceHCqu1a4qxHz3+VPmtfzR1fTLHR719&#xA;PuNUcWt1FbStAIbmXkh9RVK0RZACfbFU5/5yC8u+a9W/NTVX03QtQn02zjtrOykhtZ3jMcMCA8WC&#xA;kEcy3fFUz8m/kx+Zf5k+dF8wefLa40/S2dHvZbqP6tLJHGAEt7e3ojIpUcQeIUDfc9VXXflLzLr3&#xA;/OSi3j6LeRaRHrsVLlraVLf6rp7qqkPxCcGjtwF36UxViEv5SeZ4/wA0ToQ0S9OlfpkWi3YtZTbm&#xA;1NzwEvPjw4en8Va0pirKPPXlTzT5p/5yHnnfR786XPrNraveG2lEIt7do4Gk9Tjw4cIy1a74qqfm&#xA;Pq/576tqfmXyiukanc+XtU1OaW0tn0+SWkC3BeL0ZmjJVPgVqhqDfpvir2b/AJxv/KbU/Inl29u9&#xA;bVY9b1pommtlIb0IYQ3pxswqvMmRi3E06Dtir0Dz3rlronlTUL+502XWFSMrHpUMJna4kbZIuAV/&#xA;hJ+0SKAb4q+Wfyj/ACf17zx+YE2uea9HbSdCs5Bcz2JtTZwytX91awQlUAiUD4qD7Ip1auKvQf8A&#xA;nKn8rfMXmKPSvMPl6yk1CXTontb2zt15zeiW5xvHGvxPxYsCFqdxt1xV5Pon5cfnF+ZuraPY63a3&#xA;lppOkW8Ngl9ewNbRW9pCAtI1dU9WQqvapJpyNNwq+0dH0qy0jSbPSrFPTsrCCO2tk8I4lCLX3oMV&#xA;Sy189+ULvzPceVrfVYJPMFqvOfTwTzApyIBpxZlG7KDUd8VTC213RLvUbnTLXULafUrMA3dlFNG8&#xA;8QPQyRKS6de4xVLW/MDyanmtfKT6rCnmFolmSwbkpZXHJQrkemzlfi4BuVN6UxV82fm1588q/mxb&#xA;aNYWq/o/XFN1FYxXDKHhvUZB9VmYHgY7xOPpSdpFoduVFXz+kt5aSTRo8lvIytDcICyEqTR43G22&#xA;24OBVHFUy8ua9d6BrNtqtpHDNLbOG9C6iWaGRe6SRuCCD946gg4q+8fyj/MHy3538qx6ho0EdjLC&#xA;RHqGmIFBt5qdKKBVGpVGpuPcEAqzbFXYq7FXYq7FXYq8rf8A5yc/JtJzC+sSqVYoz/VLkqKGhO0Z&#xA;2+WKvQPL3mny75j0pdV0PUIb/T2qDPE2ykCpVwaMjAGpVgDirE/Kv57flt5p1YaVo2oSz3hjkmKv&#xA;bTxqI4l5OxZ1AFAMVSf/AKGi/Jr/AKu03/SJc/8ANGKvQvKvmnRvNOg22u6NK02m3fP6vK6NGW9O&#xA;Ro2+FwGHxoR0xVML29s7G0lvL2eO2tIFLz3EzBI0QdWZmIAA98VedD/nJD8mjqP1EeYF5cuHrm3u&#xA;RByrT+9MfGn+V9n3xVk3nH8xfKPk/RbXWtcvfT029lSG1nhRpw7SRtIpURBqqUQnl0xViunf85Kf&#xA;k3fXSWy679XeQ0R7i3uIo6n+aRk4r82IGKpr+ann3yjoPlx7HVvMJ0G41+1uYtK1GGGe5ZW4BTMn&#xA;1dX+x6qkbj2OKvF9d0/R9N/KLyzZ3n5o3VnBqt9PqEGqG2v3+sRpxR4440AnVIWo6+pQMzV22oq9&#xA;hvfzn/Lfy95X0LVL7WJZtN1aJ0029aCdpbgWvGOWR09NXB5EVJUdcVRWqfnN+X2l+VdM803moOuj&#xA;au5jsJ1hlZnZeXIGNVLrTga1GKoa+/PX8trHy3pnmS51CVNJ1h5otPm+rTlpGt24S/AE5AK21SMV&#xA;Q+g/85Dflbr2s2ejaZqM02oX0ghtojazqC7dKsyAAe5xVF6H+eP5b655pTyvp2pPJrEkssMcTQTI&#xA;jPArM4EjKE6Rmm++Ktwfnf8Al1P5wPlCG/kfXRdvYG3FvNx+sRsUdfU48KBlO9aYqqfnL+YSeRPI&#xA;d7rCUOoy0tdLjbcG5lB4sR3EahnI70pir4a8vec/MGg+Z18z2NyTrKmd/rUvxlpLmN0kdq/aP7wn&#xA;fviqhovmnXtG1eTWNPvJI9SlSeOW5LFnYXUbRyFiftMeZNT+1vgVMfOXm6bW/Mdr5gt5pItRS0sF&#xA;lmDMrrdWVvHA0iMNxVoeYI8cKseurue6u5ruduVxPI0srgAVd2LMaCgG5wKpqaMDQGhrQ9Dir6K1&#xA;H/nGXTvNnlfTvNv5e3q2qanbR3J0W9ZmjR2X95HFcfG44OCtJOW/7eFXkWv/AJSfmXoEzR6l5cvk&#xA;C9ZoYmuIfolh9SP8cVen/wDOLXlz8xNN/MBL4aTd2vl24gmg1W5uI2hiKhC8PH1OPNxMqj4akAnt&#xA;ir68xV2KuxV2KuxVJ/OWr/obyjrercuJsLC5uVNaHlFEzrQ+JI2xV8J/lt+X0Xm+380TT3TWceg6&#xA;PPqccooVM0JVlSSv7DIHqQajY79MVZT/AM4/+ar/AEWz8/KkjLZr5curzj2+tQskVua9j/pDDFUN&#xA;+R3+4/TPP/mM7HTfLtxbQMTTjPesEiP3ocVYn+X9z+W9vf3T+e7XUbyyMQFpHphjDiXkKs5kki24&#xA;4q++PJ+haXoPlnTtJ0qGS30+1hAt4ZiGkUOS5DkEgtVjXfFXzn/zmD55vfr+m+S7WUpZiEahqKqa&#xA;eo7Oywo3snplqe4PbFWC6l+Xf5R6Ra6Np+vearrSvMYt4rrX4Fs5LpB9bhSeGKLgFCMiSUYlm8aY&#xA;qmv556n5di/LT8v9E8s391qOhgX1xb3N8OM7JFKIU5KUjIAYyKnw/ZA64q8y8x/4MHl7y1DoayPr&#xA;i28z+Y7gmT02mkmJgjRX2DRx7MU+E7d6nFWVfnQ+q2WneRfLmplvrmk6BC88T15RPcyuyxMD0McS&#xA;RriqZ/8AOQ3+4638h+V+h0fy9bvKtKATXHwy+9SYKnFVn/OQFdOsvIPljcHSfL1vLMtAAJ7o/vfp&#xA;JhrirDtY81TX35a+W/L7MeOk3+pMFr8JjmW3kj+53l+/FWVfnOBp/lH8tfLuwa00L9JSIOz6nIJG&#xA;r78osVZp+Ra/k+WOtadp+qL5q8q6RNquoXl00a2Jlih9OXgqSu5HKQlKqNhXbpirxTyN5gfRPPGi&#xA;a48lPqd/BcTux6oJAZan3StcVek/84827a9+fn6Vb94IG1DUpCOh9QNGDv8A5dwDiqdf85ieZpLr&#xA;zbpPl2N/9H020NzKg6evdMRv48Y4lp/rHFXz7gV2KuxVnv5K2emav52h8r6wrPpHmKKWyuApo0cv&#xA;ptJbzR9uccyLQ+BI6EglUH+Zv5XeZPy/1xtP1SMy2UrMdP1NFIhuIx3HXi4r8SHce4oSq+iP+cPv&#xA;NZvvKGp+W5nrLo9yJ7dT2t7upoP9WVHJ/wBbFX0BirsVdirsVdirsVdirzP/AJyQ1Y6b+TuvFTSW&#xA;7ENpH7+tOgcf8i+WKvjvyz58v9A8q+Y9A0+3Bm8zLb29zeliWjt4S5eKNAOsvqUZienau+KvRY/I&#xA;mp+R/wAgdf1vWoWtNX81y2VlaWsgpLFapMJzzB+y0ojNVPQAd+iqTeXf9xf/ADjr5rvvsN5g1my0&#xA;tW6FhaL9b2703bFUt/KrXfIFpMml+YvKP+I9R1C8ijsp2uXhWISFUCcFB5Vc1NcVfe2Kvjv/AJy7&#xA;8u6nafmDba28ROm6lZxxw3AHwiaAsrxE/wA3Hi3yPscVYL5i1K//ADU862R0Py+LXW76KGC6SCWW&#xA;f15o0EZnb1PhhjVFXYCigbk4qnX/ADkJp8WkeatE8o2Z9WPy5o1nYfCN3nbnNI9PGQyg4qh9Otof&#xA;yw/Pi2tr5EktNI1GNZTMquFtrhQRJ8VfiSKYOp8RXFUd/wA5PR3sH50alNewsbWSKzksw1QskC26&#xA;K3E+HqrIPniqXavqGsfnP+bsU1jpzQjUHghFojeqLe0hCpJI8gVPhAq5NB1oO2Kp3+bRHmT/AJyR&#xA;/RkShof0hp2mRIAQAFEUcg2psHZsVeeeZ/K0+nef9S8sQr+8h1KSxth4gzFIj/slIOKsu/5yPvYJ&#xA;fzZv7GIk2ekQWmnw0O/CKBGYfMM7DFWcab508hXH5UfmFf8AlPyn/hqSOztbC4n+svcGcX8xhEY5&#xA;9OK8iaYq8r0vyg11+Ueu+Z1WrWOrWMHPwiMUyyD6XnixV61/zhjpHqa75k1gr/vNawWiMR/y0SNI&#xA;wB/6NxXFWE/85Rf+Tl1b/jBaf9QyYqof8qavbb8j7rz9fI0d3JdW0tjFvUWDFoWkYf8AFskqMv8A&#xA;kqD0bFXl2BU+17yVr+h6Nous3sFNN12A3FhcLUqeLFWjbwcABqeBHvQqnH5JW88/5s+VUh3cahFI&#xA;afyRnm/T/JU4q+8vMHl3Q/MOly6VrdlFf6fP/eW8y1FR0ZT1Vh2ZSCO2KsK/Lv8AIzyt5A8xXus6&#xA;Fd3pW9tzbPY3DxyRKDIsgKkIj/DwoORPU4q9GxV2KuxV2KuxV2KuxVLtc0ry9qtotnrtnaX9oWEi&#xA;299HFNHzUUDBJQy1HLriqXaZ5V/LzSrgXGl6PpFhcKaia1traFwR/lIqnFUbrOn+VdbtVtNatrHU&#xA;7VHEqW94kNxGsgBUOEkDAMAxFffFUC3lH8uW0xNKbRdHbS45TcR2BtrUwLMRxMgi48A5XblSuKqN&#xA;r5F/K60uYrq18vaHBcwOssE8VnaJIkiHkroyoCrKRUEYqyL69Zf8tEX/AAa/1xVQvl0LULZrW/Fr&#xA;d2zULQT+nKhp0qr1GKoXR9K8oaIjR6NZ6fpkb/bSzjhtwe+4jC4qhb/yp+Xmo6i2p6ho+kXmpOVZ&#xA;72e2tpZyYwFQmV1LkqqgDfamKtap5T/LrV7177VdG0jUL2QASXV1bW00rBRRQXkVmNAKDfFVbXdA&#xA;8k6/bRW2t2NhqMEH9xHcpFII9qfBy+zsO2Ku0Dy/5J8uxvHoVjp+mLL/AHptUiiL06c2Whb6cVUx&#xA;5W/L0ar+mBpGk/pb1fX/AEj9XtvrPrVr6nrcefOv7Va4q1ceVPy8udTOq3Gj6RNqhkWY38ltbPce&#xA;olOL+qVL8loKGuKqV95K/LPULuW9v9B0W7vJ25z3M9paSSux/ad3Qsx+ZxVfF5P/AC3isJtOi0TR&#xA;o9PuWSS4s1tbUQyPHXgzxheLFa7EjbFVWHy15Ch0ifRYdK0qLR7lxLc6alvbrbSSAqQ7whfTZv3a&#xA;7kdh4YqjNB8veWNGhkXQNNstOhnIaYWEEUCuy7At6SqGI98VeJea/wAitS86/nvea3q8Ji8oQR2r&#xA;ySFgGu2jgQehGAeQXkKO222w36KvYfO3lmDXfJGr+XY41RLyxltrZFACo/AiGgFAAjhSMVfnroeh&#xA;6hrOu2WiWcZN9fXEdrEjAijyOE+LwC138MCvvrXfyw8ta1+X0Pki8jrp9raxW1nOAPVhe3jCRTIf&#xA;5xTfx3B2Jwq8T/5x9/JLzJ5a/NLVL/X7YxwaBG8Nhd0IjuJbpeKywsdmUQFuXdSwB3rir6bxV2Ku&#xA;xV2KuxV2KuxV2KuxVgv5gi5mv7WKOJ3SKItVVJFXanb/AFcVYp9Rvf8Alnk/4Bv6YVd9Rvf+WeT/&#xA;AIBv6Yq76je/8s8n/AN/TFXfUb3/AJZ5P+Ab+mKu+o3v/LPJ/wAA39MVd9Rvf+WeT/gG/pirvqN7&#xA;/wAs8n/AN/TFXfUb3/lnk/4Bv6Yq76je/wDLPJ/wDf0xV31G9/5Z5P8AgG/pirvqN7/yzyf8A39M&#xA;Vd9Rvf8Alnk/4Bv6Yq76je/8s8n/AADf0xV31G9/5Z5P+Ab+mKu+o3v/ACzyf8A39MVd9Rvf+WeT&#xA;/gG/pir1DyrbNbaBZxspVypdgRQ1di2/34FTXFXYqwbyf+Tnk7yv5k1fzHa24n1TU7qW6hnlUE2q&#xA;TCrxQfygszb9aHj0GKs5xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:D207D2E5179E11DDA166B6CFB36E54EC</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:463F1C7417A511DDA166B6CFB36E54EC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>70.400015</stDim:w>
            <stDim:h>42.409992</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>0/0/0/0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=35</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>35.000004</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -120.218 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 120.218 li
199.559 120.218 li
199.559 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 120.218 mo
199.559 120.218 li
199.559 0 li
0 0 li
0 120.218 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
14.7402 105.489 mo
119.23 105.489 li
120.252 99.4727 li
15.7534 99.4727 li
14.7402 105.489 li
cp
0 0 0 0.35 cmyk
f
184.814 53.2256 mo
184.78 52.998 184.206 52.793 183.824 52.4766 cv
182.521 51.3896 177.861 46.8047 168.693 47.1016 cv
167.533 47.1387 166.475 47.248 165.511 47.4131 cv
167.464 46.7793 168.475 46.4004 169.063 46.165 cv
169.773 45.8848 174.453 44.2803 176.971 36.0605 cv
177.186 35.3574 177.793 33.6631 177.643 33.5361 cv
177.455 33.377 175.881 33.6582 174.291 34.627 cv
172.695 35.5957 167.336 36.4414 166.699 36.5439 cv
166.326 36.6035 164.752 36.3682 162.4 37.6035 cv
165.05 34.8818 167.861 31.0127 168.616 25.5859 cv
168.977 22.9814 168.824 21.9199 168.713 21.9268 cv
168.555 21.9385 168.467 21.9395 168.273 21.998 cv
167.684 22.1709 167.084 22.6709 165.136 23.9736 cv
163.184 25.2773 161.117 26.7217 161.117 26.7217 cv
161.117 26.7217 161.824 19.6318 161.604 19.4668 cv
161.389 19.3066 157.363 19.3457 151.185 26.2256 cv
151.185 26.2256 151.887 20.332 150.729 18.1084 cv
150.729 18.1084 150.406 16.5 150.154 15.6602 cv
150.029 15.2383 149.699 14.7939 149.645 14.832 cv
149.58 14.877 149.033 14.9668 148.155 15.9756 cv
146.793 17.5361 140.458 19.4453 139.408 27.6416 cv
138.615 24.335 136.932 19.9111 132.772 17.6719 cv
130.424 15.3721 129.381 14.6855 129.26 14.7451 cv
129.154 14.7998 129.199 15.8213 128.843 18.1221 cv
128.441 20.7031 128.083 21.5195 128.083 21.5195 cv
128.083 21.5195 123.725 17.6865 123.613 17.5752 cv
123.408 17.373 120.751 25.7861 121.531 29.9863 cv
121.531 29.9863 120.152 28.9189 117.643 27.6289 cv
114.793 26.166 110 25.9141 110.033 26.1387 cv
110.091 26.5166 114.078 34.3086 115.757 37.0449 cv
115.757 37.0449 105.014 35.1992 105.203 35.8701 cv
105.264 36.0918 105.521 36.5137 105.945 38.3066 cv
105.945 38.3066 101.729 38.2148 101.785 38.5645 cv
101.844 38.9531 104.98 44.1367 105.221 44.4199 cv
105.221 44.4199 101.959 45.0498 101.271 45.0879 cv
100.805 45.1123 103.45 52.418 110.701 54.2422 cv
111.73 54.501 112.723 54.6904 113.676 54.8301 cv
114.497 54.9082 115.504 55.0059 116.375 55.0879 cv
120.689 55.2598 123.523 54.1514 123.033 52.5537 cv
123.033 52.5537 122.894 51.9619 118.467 50.3467 cv
118.467 50.3467 118.592 49.8184 118.886 49.7471 cv
119.183 49.6758 123.785 51.3604 123.458 51.0918 cv
123.131 50.8174 121.447 48.9463 121.75 48.9619 cv
122.053 48.9756 124.215 49.8906 124.932 49.2178 cv
125.617 48.5752 126.048 47.3936 126.5 47.1357 cv
126.951 46.8789 125.297 45.3477 127.477 46.0518 cv
127.477 46.0518 128.955 45.2217 127.791 43.8662 cv
126.627 42.5059 122.936 38.1396 128.958 43.4092 cv
130.397 44.6719 134.001 40.8271 133.705 38.7363 cv
133.705 38.7363 135.145 40.1875 135.449 40.3428 cv
135.755 40.499 137.771 40.7383 138.229 40.04 cv
138.439 39.7197 137.489 36.7432 138.1 35.4346 cv
138.1 35.4346 138.356 35.4121 138.6 35.6885 cv
138.842 35.9688 138.869 39.0732 139.963 39.6631 cv
139.963 39.6631 141.191 38.9434 141.398 38.4082 cv
141.609 37.8672 141.064 41.7617 144.75 40.082 cv
144.75 40.082 146.544 38.4883 147.059 38.4414 cv
147.57 38.3926 146.672 40.332 147.127 41.0234 cv
147.582 41.7148 149.091 42.1777 149.57 41.3135 cv
150.053 40.4492 152.352 38.7217 152.53 38.791 cv
152.711 38.8623 151.361 42.4609 151.206 42.8145 cv
150.982 43.3262 150.822 44.0879 150.822 44.0879 cv
150.822 44.0879 150.998 45.0928 152.254 45.3701 cv
152.254 45.3701 154.625 43.9863 157.092 42.1875 cv
156.832 42.5 156.572 42.8213 156.309 43.168 cv
156.309 43.168 153.117 46.4443 153.116 46.9199 cv
153.121 47.3945 154.211 48.459 155.105 47.8555 cv
155.998 47.2568 158.16 46.3613 158.348 46.5176 cv
158.533 46.6738 158.878 47.1162 158.43 47.376 cv
157.979 47.6318 155.466 48.9463 155.466 48.9463 cv
155.466 48.9463 158.336 49.1416 161.846 48.4316 cv
158.046 49.9736 156.73 52.3203 156.763 52.543 cv
156.877 53.2959 162.78 51.7656 162.941 52.1377 cv
163.789 54.0615 161.07 52.873 159.879 53.0732 cv
158.688 53.2695 155.628 53.3389 158.445 55.752 cv
158.445 55.752 158.967 55.792 157.576 56.6113 cv
156.185 57.4336 160.674 57.9189 161.207 58.5156 cv
161.738 59.1143 156.755 58.459 156.853 59.959 cv
156.949 61.4609 155.996 60.5137 159.307 64.0479 cv
159.307 64.0479 157.318 63.585 157.086 63.8652 cv
156.853 64.1475 161.439 67.9492 161.41 69.0303 cv
161.41 69.0303 160.479 69.6777 160.08 69.1113 cv
159.684 68.5439 156.911 65.4775 156.461 65.3877 cv
156.123 65.3203 155.476 65.4775 155.176 66.0723 cv
155.176 66.0723 156.388 68.8945 156.009 68.9746 cv
155.628 69.0537 153.734 67.7178 153.734 67.7178 cv
153.734 67.7178 152.49 68.2666 152.898 69.3936 cv
153.305 70.5186 156.684 74.3496 156.49 74.585 cv
156.49 74.585 156.203 75.2158 155.768 75.1709 cv
155.332 75.123 152.994 70.8945 152.418 70.7324 cv
151.841 70.5703 153.09 74.6836 153.09 74.6836 cv
153.09 74.6836 150.98 72.4639 150.419 72 cv
149.859 71.5352 149.775 72.4912 149.775 72.4912 cv
150.386 77.1846 li
150.386 77.1846 143.817 67.3916 145.424 79.0693 cv
145.424 79.0693 145.271 79.7314 145.055 79.709 cv
144.837 79.6875 143.441 75.8447 143.602 74.7949 cv
143.764 73.7441 142.449 77.7051 142.449 77.7051 cv
142.449 77.7051 140.39 69.5244 136.123 77.9111 cv
136.123 77.9111 135.826 74.7422 135.17 74.2002 cv
134.518 73.6572 133.999 73.4668 133.809 73.4619 cv
133.67 73.4609 132.806 73.4277 132.031 74.8916 cv
129.025 78.791 127.096 83.8066 126.553 88.1445 cv
126.458 91.1582 126.799 96.5869 126.621 97.751 cv
126.516 98.4316 126.672 98.5049 126.778 98.7295 cv
126.813 98.7998 127.936 97.8721 128.293 97.6348 cv
128.822 97.2832 134.308 89.9072 134.652 88.0625 cv
134.652 88.0625 137.578 100.913 138.57 102.29 cv
138.786 102.587 138.965 102.919 139.111 102.688 cv
139.404 102.229 139.842 101.029 140.17 100.93 cv
140.591 100.804 141.828 100.648 142.478 98.8154 cv
143.127 96.9824 144.297 95.1924 144.845 90.4365 cv
144.845 90.4365 151.063 98.3652 151.871 99.1016 cv
152.192 99.3965 153.881 96.5859 154.625 92.0703 cv
155.371 87.5537 153.768 81.4863 152.754 81.2793 cv
152.754 81.2793 152.332 80.6133 153.511 81.0352 cv
154.18 81.2764 156.768 85.7676 162.736 89.1768 cv
163.74 89.752 165.876 89.7617 165.889 89.7227 cv
166.369 88.3838 161.686 76.127 161.686 76.127 cv
161.686 76.127 161.801 75.9873 162.744 76.374 cv
163.686 76.7607 172.629 82.5439 178.055 79.834 cv
179.155 79.2852 179.219 79.168 179.219 79.168 cv
179.84 76.498 175.062 71.4463 172.127 69.1504 cv
172.127 69.1504 179.834 68.8379 181.016 66.7949 cv
181.016 66.7949 182.437 66.2822 183.17 65.2715 cv
183.297 65.0928 182.34 63.335 181.229 62.5625 cv
178.318 60.5439 177.688 59.7842 177.688 59.7842 cv
177.688 59.7842 178.502 58.8008 179.678 58.4326 cv
180.852 58.0645 184.65 55.7207 183.636 54.5654 cv
183.636 54.5654 184.859 53.5039 184.814 53.2256 cv
0 0 0 1 cmyk
f
114.479 94.1592 mo
115.105 90.3975 li
115.201 89.8193 115.275 89.1445 115.325 88.375 cv
115.377 87.6045 115.405 86.7012 115.412 85.6631 cv
115.465 86.1211 115.539 86.6055 115.629 87.1094 cv
115.721 87.6152 115.826 88.1582 115.947 88.7373 cv
117.125 94.1592 li
121.152 94.1592 li
123.603 79.4219 li
119.574 79.4219 li
119.021 82.7354 li
118.921 83.3525 118.836 84.1162 118.764 85.0264 cv
118.691 85.9365 118.627 87.0303 118.568 88.3105 cv
118.352 87.0107 li
118.267 86.4971 118.186 86.04 118.11 85.6465 cv
118.033 85.252 117.965 84.9014 117.904 84.5957 cv
116.699 79.4219 li
112.902 79.4219 li
110.451 94.1592 li
114.479 94.1592 li
cp
f
108.717 94.1592 mo
109.303 90.6357 li
105.713 90.6357 li
106.06 88.5615 li
109.277 88.5615 li
109.863 85.0361 li
106.645 85.0361 li
106.993 82.9473 li
110.581 82.9473 li
111.168 79.4219 li
103.398 79.4219 li
100.948 94.1592 li
108.717 94.1592 li
cp
f
92.3472 94.1592 mo
92.9727 90.3975 li
93.0693 89.8193 93.1436 89.1445 93.1938 88.375 cv
93.2456 87.6045 93.2739 86.7012 93.2788 85.6631 cv
93.334 86.1211 93.4082 86.6055 93.499 87.1094 cv
93.5894 87.6152 93.6943 88.1582 93.8154 88.7373 cv
94.9917 94.1592 li
99.02 94.1592 li
101.472 79.4219 li
97.4429 79.4219 li
96.8921 82.7354 li
96.7896 83.3525 96.7031 84.1162 96.6299 85.0264 cv
96.5601 85.9365 96.4941 87.0303 96.4355 88.3105 cv
96.2217 87.0107 li
96.1343 86.4971 96.0542 86.04 95.978 85.6465 cv
95.9023 85.252 95.833 84.9014 95.7729 84.5957 cv
94.5669 79.4219 li
90.771 79.4219 li
88.3198 94.1592 li
92.3472 94.1592 li
cp
f
75.9385 84.3379 mo
76.2163 82.6709 75.8354 81.3857 74.7959 80.4805 cv
73.9771 79.7754 72.6265 79.4219 70.7407 79.4219 cv
66.4614 79.4219 li
64.0098 94.1592 li
68.1689 94.1592 li
69.0273 89.0039 li
69.1597 88.0313 li
69.1982 88.2354 69.231 88.4102 69.2573 88.5566 cv
69.2832 88.7021 69.2988 88.8213 69.3037 88.9092 cv
70.4956 94.1592 li
75.0176 94.1592 li
72.9277 88.0332 li
74.6387 87.3506 75.6421 86.1201 75.9385 84.3379 cv
71.8164 84.168 mo
71.7266 84.71 71.4917 85.1553 71.1143 85.5059 cv
70.7339 85.8564 70.3032 86.0303 69.8223 86.0303 cv
69.5415 86.0303 li
70.1265 82.5186 li
70.2773 82.5186 li
71.4854 82.5186 71.999 83.0684 71.8164 84.168 cv
f
57.5332 88.7393 mo
59.0786 88.7393 li
59.0303 89.0264 58.9512 89.2871 58.8418 89.5215 cv
58.7329 89.7568 58.603 89.9551 58.4521 90.1191 cv
58.3013 90.2813 58.1289 90.4092 57.9336 90.498 cv
57.7378 90.5898 57.5288 90.6357 57.3096 90.6357 cv
56.7544 90.6357 56.396 90.3633 56.2324 89.8174 cv
56.0684 89.2725 56.0869 88.3984 56.2866 87.1943 cv
56.7573 84.3633 57.5674 82.9473 58.7173 82.9473 cv
59.0449 82.9473 59.2949 83.082 59.4668 83.3525 cv
59.6392 83.624 59.7163 83.9922 59.6992 84.4551 cv
63.9844 83.042 li
63.2832 80.6289 61.709 79.4219 59.2637 79.4219 cv
57.4189 79.4219 55.8555 80.0859 54.5723 81.4121 cv
53.2886 82.7402 52.4556 84.5557 52.0718 86.8604 cv
51.6938 89.1338 51.9243 90.9229 52.7646 92.2256 cv
53.6118 93.5156 54.9688 94.1592 56.833 94.1592 cv
58.7305 94.1592 60.2739 93.5 61.4634 92.1807 cv
62.5527 90.9707 63.3271 88.9883 63.7842 86.2354 cv
63.8833 85.6436 li
58.0488 85.6436 li
57.5332 88.7393 li
cp
f
42.7993 94.1592 mo
43.3857 90.6357 li
39.7964 90.6357 li
40.1411 88.5615 li
43.3594 88.5615 li
43.9453 85.0361 li
40.7275 85.0361 li
41.0747 82.9473 li
44.6641 82.9473 li
45.251 79.4219 li
37.4805 79.4219 li
35.0293 94.1592 li
42.7993 94.1592 li
cp
f
35.5601 79.4219 mo
31.3789 79.4219 li
28.9282 94.1592 li
33.1089 94.1592 li
35.5601 79.4219 li
cp
f
28.6104 86.8008 mo
29.0225 84.3193 28.5889 82.3877 27.3081 81.0059 cv
26.3335 79.9502 24.8135 79.4219 22.749 79.4219 cv
19.1396 79.4219 li
16.6895 94.1592 li
20.5996 94.1592 li
22.7568 94.1592 24.4751 93.5938 25.7529 92.4609 cv
27.2515 91.1299 28.2036 89.2461 28.6104 86.8008 cv
24.3145 86.9502 mo
23.917 89.3369 22.9644 90.5635 21.4551 90.6357 cv
22.7031 83.1309 li
22.8345 83.1309 li
23.4814 83.1309 23.9399 83.4736 24.2056 84.1611 cv
24.4746 84.8418 24.5103 85.7734 24.3145 86.9502 cv
f
125.526 61.3828 mo
124.789 60.0625 123.568 59.4014 121.864 59.4014 cv
120.174 59.4014 118.721 60.0537 117.511 61.3555 cv
116.305 62.6533 115.516 64.416 115.146 66.6455 cv
114.754 69.0059 114.941 70.8438 115.713 72.1582 cv
116.488 73.4795 117.757 74.1396 119.514 74.1396 cv
121.137 74.1396 122.539 73.4863 123.721 72.1777 cv
124.899 70.8623 125.676 69.0908 126.047 66.8672 cv
126.436 64.5332 126.26 62.7051 125.526 61.3828 cv
121.92 66.8418 mo
121.705 68.1377 121.435 69.0889 121.109 69.7002 cv
120.784 70.3096 120.385 70.6143 119.91 70.6143 cv
119.033 70.6143 118.828 69.2197 119.291 66.4287 cv
119.68 64.0947 120.322 62.9268 121.219 62.9268 cv
122.119 62.9268 122.355 64.2305 121.92 66.8418 cv
f
113.266 60.8457 mo
112.496 59.8818 111.352 59.4014 109.835 59.4014 cv
108.229 59.4014 106.852 59.8848 105.7 60.8525 cv
104.542 61.8301 103.836 63.0859 103.58 64.6152 cv
103.369 65.8867 103.555 66.9736 104.141 67.8789 cv
104.736 68.7646 105.565 69.207 106.629 69.207 cv
107.059 69.207 107.571 69.0684 108.174 68.7861 cv
107.975 69.0176 107.793 69.2275 107.631 69.4229 cv
107.467 69.6172 107.327 69.793 107.207 69.9512 cv
104.033 74.1396 li
108.525 74.1396 li
110.363 71.6094 li
112.527 68.6406 113.751 66.3174 114.027 64.6416 cv
114.289 63.0752 114.035 61.8076 113.266 60.8457 cv
110.029 64.459 mo
109.822 65.7197 109.327 66.3496 108.549 66.3496 cv
107.729 66.3496 107.426 65.7246 107.631 64.4785 cv
107.851 63.1572 108.368 62.4971 109.178 62.4971 cv
109.963 62.4971 110.248 63.1504 110.029 64.459 cv
f
90.9106 74.1396 mo
92.335 74.1396 93.5864 73.6865 94.666 72.7783 cv
95.7471 71.8691 96.4028 70.7158 96.6348 69.3164 cv
96.7729 68.4932 96.6992 67.7754 96.4136 67.1621 cv
96.1338 66.5488 95.6011 65.9502 94.8164 65.3662 cv
94.23 64.916 li
93.7236 64.541 93.5034 64.1641 93.5664 63.7832 cv
93.606 63.5498 93.7446 63.3506 93.9873 63.1846 cv
94.2217 63.0127 94.501 62.9268 94.8213 62.9268 cv
95.2437 62.9268 95.6465 63.0732 96.0317 63.3613 cv
96.418 63.6514 96.7402 64.0479 96.9966 64.5498 cv
97.7334 60.1318 li
96.8037 59.6455 95.8428 59.4014 94.8467 59.4014 cv
93.7305 59.4014 92.7271 59.709 91.8354 60.3223 cv
91.5127 60.5371 91.2183 60.7852 90.9502 61.0645 cv
90.6831 61.3447 90.4385 61.6533 90.2148 61.9902 cv
89.7603 62.7158 89.4775 63.4092 89.3672 64.0732 cv
89.3037 64.46 89.2891 64.8281 89.3237 65.1797 cv
89.3584 65.5293 89.4502 65.8682 89.5962 66.1953 cv
89.7417 66.5264 89.9492 66.8447 90.2188 67.1553 cv
90.4878 67.4658 90.8228 67.7773 91.2251 68.0918 cv
91.8267 68.5781 li
92.2603 68.9414 92.4468 69.3125 92.3828 69.6924 cv
92.3384 69.958 92.189 70.1777 91.9331 70.3516 cv
91.6758 70.5283 91.3677 70.6143 91.0068 70.6143 cv
90.0508 70.6143 89.251 70.0801 88.6069 69.0107 cv
87.8535 73.541 li
88.9102 73.9395 89.9287 74.1396 90.9106 74.1396 cv
f
88.6138 59.4014 mo
84.4331 59.4014 li
81.9824 74.1396 li
86.1636 74.1396 li
88.6138 59.4014 li
cp
f
73.3828 74.1396 mo
74.0088 70.3789 li
74.1055 69.7988 74.1792 69.123 74.2295 68.3545 cv
74.2798 67.584 74.3086 66.6807 74.3145 65.6426 cv
74.3706 66.1016 74.4424 66.583 74.5332 67.0898 cv
74.624 67.5957 74.7295 68.1387 74.8516 68.7168 cv
76.0273 74.1396 li
80.0552 74.1396 li
82.5073 59.4014 li
78.4785 59.4014 li
77.9272 62.7148 li
77.8247 63.3311 77.7388 64.0957 77.667 65.0049 cv
77.5952 65.916 77.5308 67.0107 77.4722 68.291 cv
77.2559 66.9922 li
77.1699 66.4756 77.0898 66.0215 77.0127 65.626 cv
76.9375 65.2314 76.8691 64.8809 76.8076 64.5762 cv
75.603 59.4014 li
71.8057 59.4014 li
69.356 74.1396 li
73.3828 74.1396 li
cp
f
69.3047 66.7822 mo
69.7173 64.2979 69.2827 62.3672 68.002 60.9863 cv
67.0283 59.9307 65.5093 59.4014 63.4429 59.4014 cv
59.835 59.4014 li
57.3833 74.1396 li
61.2939 74.1396 li
63.4512 74.1396 65.1709 73.5723 66.4482 72.4414 cv
67.9458 71.1104 68.8965 69.2236 69.3047 66.7822 cv
65.0093 66.9297 mo
64.6118 69.3164 63.6587 70.5439 62.1504 70.6143 cv
63.3979 63.1094 li
63.5283 63.1094 li
64.1772 63.1094 64.6338 63.4531 64.9009 64.1416 cv
65.1685 64.8232 65.2036 65.751 65.0093 66.9297 cv
f
48.7842 74.1396 mo
49.4092 70.3789 li
49.5059 69.7988 49.5791 69.123 49.6304 68.3545 cv
49.6807 67.584 49.7095 66.6807 49.7153 65.6426 cv
49.77 66.1016 49.8433 66.583 49.9341 67.0898 cv
50.0249 67.5957 50.1304 68.1387 50.2524 68.7168 cv
51.4282 74.1396 li
55.4556 74.1396 li
57.9072 59.4014 li
53.8794 59.4014 li
53.3271 62.7148 li
53.2256 63.3311 53.1377 64.0957 53.0674 65.0049 cv
52.9961 65.916 52.9307 67.0107 52.8721 68.291 cv
52.6567 66.9922 li
52.5713 66.4756 52.4897 66.0215 52.4141 65.626 cv
52.3384 65.2314 52.2695 64.8809 52.2075 64.5762 cv
51.0039 59.4014 li
47.2061 59.4014 li
44.7549 74.1396 li
48.7842 74.1396 li
cp
f
32.0654 63.582 mo
32.272 62.3428 31.9956 61.3301 31.2373 60.5449 cv
30.4883 59.7822 29.2056 59.4014 27.3872 59.4014 cv
22.5249 59.4014 li
20.0742 74.1396 li
25.9287 74.1396 li
27.3257 74.1396 28.5156 73.7539 29.501 72.9746 cv
30.4907 72.2051 31.0913 71.1885 31.3022 69.9219 cv
31.4697 68.915 31.3413 68.1455 30.9194 67.6104 cv
30.4966 67.0762 29.751 66.7324 28.6802 66.5801 cv
30.6299 66.4268 31.7583 65.4287 32.0654 63.582 cv
25.5874 68.1113 mo
26.1294 68.1113 26.5352 68.2393 26.8022 68.4951 cv
27.0703 68.751 27.167 69.1055 27.0918 69.5576 cv
27.0161 70.0107 26.8003 70.3721 26.4463 70.6406 cv
26.0894 70.9111 25.6519 71.0439 25.1299 71.0439 cv
25.0903 71.0439 25.0415 71.043 24.9805 71.04 cv
24.9209 71.0361 24.8516 71.0313 24.7715 71.0244 cv
25.2568 68.1113 li
25.5874 68.1113 li
cp
27.8892 63.7471 mo
27.8213 64.1475 27.6245 64.459 27.2974 64.6807 cv
26.9683 64.9033 26.5537 65.0137 26.0527 65.0137 cv
25.7725 65.0137 li
26.1938 62.4863 li
26.2944 62.4795 26.3804 62.4746 26.4512 62.4717 cv
26.521 62.4678 26.5806 62.4668 26.6274 62.4668 cv
27.6089 62.4668 28.0308 62.8926 27.8892 63.7471 cv
f
82.9341 89.0371 mo
82.8237 89.6982 82.6699 90.1602 82.4727 90.4209 cv
82.2778 90.6709 81.9795 90.793 81.5786 90.793 cv
81.1914 90.793 80.937 90.6602 80.8184 90.3926 cv
80.6982 90.126 80.6924 89.6709 80.7993 89.0273 cv
82.3813 79.5186 li
78.2012 79.5186 li
76.5605 89.3809 li
76.2461 91.2715 76.6323 92.6455 77.7188 93.5049 cv
78.5757 94.1797 79.7197 94.5176 81.1504 94.5176 cv
82.4126 94.5176 83.5361 94.21 84.5195 93.6016 cv
85.25 93.1426 85.8037 92.6289 86.1797 92.0645 cv
86.5562 91.5215 86.8174 90.8154 86.9629 89.9434 cv
88.6963 79.5186 li
84.5166 79.5186 li
82.9341 89.0371 li
cp
f
82.9941 75.6611 mo
82.7397 75.3633 82.3896 75.2168 81.9453 75.2168 cv
81.5073 75.2168 81.1084 75.3633 80.7476 75.6611 cv
80.3867 75.957 80.1719 76.3164 80.1016 76.7402 cv
80.0322 77.1572 80.1284 77.5137 80.3896 77.8096 cv
80.6519 78.1064 81.0015 78.2549 81.4404 78.2549 cv
81.8716 78.2549 82.2676 78.1064 82.6279 77.8096 cv
82.9951 77.5068 83.2139 77.1514 83.2817 76.7402 cv
83.3525 76.3164 83.2573 75.957 82.9941 75.6611 cv
f
87.438 75.6699 mo
87.1704 75.3682 86.8179 75.2168 86.3804 75.2168 cv
85.936 75.2168 85.5337 75.3633 85.1714 75.6611 cv
84.8125 75.957 84.5972 76.3135 84.5278 76.7314 cv
84.4575 77.1543 84.5527 77.5137 84.8154 77.8096 cv
85.0771 78.1064 85.4326 78.2549 85.8843 78.2549 cv
86.3218 78.2549 86.7207 78.1064 87.0815 77.8096 cv
87.4419 77.5137 87.6558 77.1631 87.7236 76.7578 cv
87.7944 76.3271 87.6997 75.9658 87.438 75.6699 cv
f
39.3276 68.917 mo
39.2178 69.5791 39.0645 70.042 38.8672 70.3018 cv
38.6714 70.5508 38.373 70.6738 37.9731 70.6738 cv
37.5845 70.6738 37.3315 70.54 37.2129 70.2734 cv
37.0923 70.0068 37.0864 69.5518 37.1934 68.9082 cv
38.7749 59.3975 li
34.5957 59.3975 li
32.9536 69.2607 li
32.6401 71.1523 33.0259 72.5264 34.1128 73.3838 cv
34.9697 74.0615 36.1128 74.3984 37.5444 74.3984 cv
38.8066 74.3984 39.9302 74.0918 40.9136 73.4814 cv
41.645 73.0234 42.1982 72.5098 42.5737 71.9443 cv
42.9512 71.4023 43.2114 70.6963 43.3564 69.8242 cv
45.0908 59.3975 li
40.9102 59.3975 li
39.3276 68.917 li
cp
f
39.3892 55.542 mo
39.1333 55.2451 38.7837 55.0957 38.3389 55.0957 cv
37.9014 55.0957 37.502 55.2451 37.1411 55.542 cv
36.7813 55.8379 36.5659 56.1982 36.4956 56.6201 cv
36.4258 57.0381 36.522 57.3945 36.7837 57.6895 cv
37.0459 57.9873 37.396 58.1357 37.834 58.1357 cv
38.2661 58.1357 38.6611 57.9873 39.022 57.6895 cv
39.3896 57.3877 39.6074 57.0313 39.6763 56.6201 cv
39.7461 56.1982 39.6504 55.8379 39.3892 55.542 cv
f
43.8311 55.5508 mo
43.5645 55.248 43.2119 55.0957 42.7749 55.0957 cv
42.3296 55.0957 41.9272 55.2451 41.5664 55.542 cv
41.2056 55.8379 40.9902 56.1934 40.9229 56.6113 cv
40.8511 57.0352 40.9473 57.3955 41.209 57.6904 cv
41.4712 57.9873 41.8271 58.1357 42.2788 58.1357 cv
42.7153 58.1357 43.1152 57.9873 43.4756 57.6904 cv
43.835 57.3955 44.0493 57.0439 44.1172 56.6396 cv
44.1885 56.209 44.0933 55.8467 43.8311 55.5508 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Tatjana) ()%%Title: (Gruene_Logo_1c.eps)%%CreationDate: 4/29/08 5:37 PM%AI9_DataStream%Gb"-6H!2.]dP#o*TKNR>bUdKMYebiTJ,t:^Z,+H"!b@6%&sgJjrUq=G=_@hL@jc^;263`V!e%PimrS#/8X5R+6Y+CY;-Bl7F<92g%\*]ZEc9IZ=$N8EfV6"EHWD_E[rQsm?gfIdjC7:/OQ'A;Gg()Zgls)^12r";+DWe%Qld\%u::I];hIndLmRic;?1Xe>gM5;$h>9[V%lrFjcWS5>2j)+,Yh;eHFZb'I#'Gnab"[@F`CYUb5bPYS%GM?3$a6Vk"[Fr4L]r0UJgorI,pMmOsVbp?i(jYN,CbIgb.eWecHp)6:%H;,;KpTE3K2CiWoCu.C`)Z;!Y;H8s]=Z5*9XZB5Tb,\6XiL5\9U/s3HdE7B9l;i%/Z-%eq<Gbejlag<.'\AgR#bgBf\'9CRQOb!9%\*\XBpIjXqFF,<a>4;0GDuW7)(HB%,%qf29Is>ce]-m"#^.`Ztf9HOM3nMX-E`icRWOEcGLE_WlIS,<TNUBNI:[?bL4n`eUmH(XK%Gdh?Pp)AK?]3tr"&'aggc6j\-U8lX0*Oi,=C=Q4!]51FU6`4@mVH.kV\#aR6FCCYFY:>m;dQAF8;gofFYK@HZi*lBRk-ht982DhN%)?b#GYn/Fuh7^K3(YGU&jFcVoFX$iks1\u4@*n@$gYP=(j(\g-41)3s8(,5o?\F+"`[q3feJnWZ)-FT"U]G<jq@*Ld:%R%Prj09-%G9;(-d%@K$e$AK-](iAWr)-h@\$"aD+bGVJ\Qc8tBmIk,:s6.`AQbsC=f>n7ot'%Xl_9F*U5nO@Sa_VBY)?KYKhp3uePN;I_iqJH%maQ!M;m55!]l$tt\mEGUH<m,)&^,E14OU"[`KU:LSQ6)iW.d7j'=BMAJ#75s1VtO)?q0q0]R<>lZ^;CiEJ5:h'.jN\Uh.aUT9qRO%;2RB-:P#D8O'7ne5#J4a8"%+U(qIFaTI<XRV`ZCaQdO"/ASfdV7ddIB?UOfh$hM7`>*9Vb=j&s20mo`3k3&qP5Xh9`r:#OnbYH_2%T/(GOi"NLP5CCU'$C1s&V18.$irDR:j,^re1-U7MC'i[C\B)m*oGG,t9DXp>rUl<lrZCE5G!9MIG'I2&/U&p6I%lqb2s)JAO_=3@%3ga3Pia]Dm3s%G,6*T+a@38QuCr=<t;Zmna]("<Ni%Cc<W(Xl,2iQO!&V"[RG1?)0Qe(8D\M&FfEhQ1CAm'2+NO2OF5Jc6=g?"`#%`M_:KZ@"Wc\1cM%j*c`5GWNbdT@1VWp7WJ/"%M?=&l4;0nAjgTfC)epPp]R3iBM\t=&cjt&rZZ(I`n?laE@80J#/$:8kJe0J$pr\%iOA_FNa+Z+hm_YEXfop=n6>lM2WQpsQG6=/F&P]JDu&/AP3_UArfl>:pc6n8T<bV?m9dsobtg-1L0<E8".gs6>?\_Sm]8MC9kD6B%AZPU&&`;_k(KYb"hQ1X!RpI-3ZSsbR/l132W]M-@/#opE2lS^d<D)@U`N7\U5$ue=9uZ+82mKg>(-_8JJ#*K8_gcn8s1I4RGRA$;%QPF9lplE/,hW6tnQ%!tJFfE2%T_V3pnjuW(^JHS0Vs[*V_5upBT4-cf;Q;!4UY1+2rdRk)hBQ.W4tLEe>T"pW8.Y#]#_DnlN8-)V%s%Bud3^tK.JAq?bbiJ$)d^9$V5BF_tKb*dZa3hYQWRPNS?o[HO1mmm9CXMgtqA-$kO,ul@'uDZ>mp+LJ64:S<LA@^Gaq[q\=IR"]%+cXFl48LP2!.Q2f=+1!:s7mo6.5;>8P#$]7N4P(^_r)E/0n5Geb_G'`;i/@RWY!)L=o9(R!mW&2`86I$@2]g_C/QQ$>C6q!]T>,V%kVaFcOVQV-oe_&RNZ04=2J[mX!qZ&qN9uM(H5&`p@F"dq;m;;Z(oZi0#l\JYFZ+G/CT8SC#$AiQaR/3*1s!RMC5$ZWe@]q/r-"lS%r8Vq\RATM&OUF8m6XYJ./3NY]G&X;A?B&0o7"u0j[o(Hi&*R4T"]p+SB2K@TV@()qe@+k+^>l6qI.5l0:1KZDVM*_nqTr@8.jk"'%BAm54C7(cnapJL+i*!r(B:["?]ig1%_(ub]kAr&6_a9jO\#4N(K6MS<oT[%S"\HM"f5BEr*MaB$G]i;'9B!;.'<^9RRb+;JC&u^0%eig$GqD<UA!DEsqQD!,0<DRXtpc"7XK5jVFnXmCJeZj%Oc's,E\ji?tFXR0A>h]k$as/g]&PG4L42_6@1>V+SRJb/A-k!14`#N^8%*n6qA,#u;4,4c%pn@<#@"m2S-D5s;L-?oA&__n"qTZ`Qqo,Yhb*$84S0mS*$nTA%8gSZg;0:H'-OK04P:F4*ur$MV/4AF?&%TcGN%Mao!ZUd9MY5s%9[!#rZn^PB>eb?R$tN>]e4q;@H!FsFrcJ1C>>i0l$+2H<IZl0GV=OS<A/UQ=s]_,[1!D\_R^7Jo21<.4^6kZ]bC%%TkYieuL!"=N2E$?[qa%63Ac?,;M%grX<ueXUEYV'b%TkN'I*I3*6]=/Qj=Z:;3j8*fN:UdCS7]F9Q7B+\mZ26m3$k'mi\eh-XP2%BF!C!rH4B@QCX&O14!<Y>9FMA+a;:B:rZP,Zsdm-;Te/SJh(irN,]QUWocM^aqD&r[fbZTkef.%,3pBmb.N-Se(=Bs31CN7[2uK%%:B@;Lb.7d\b*$lg-8CQMl_l8u.@R-lo")k]jHnMCi=ir%-Q::Aa3UTZ?c"$qW>PPFalE'7YkM?7qqK_II0rX$Th-6U4I]S](Kk3^%660=>&Z8E'oiE<9o7abb*)`jo..Xb'OcQ&Q4tG9KDM+aO1]0E'J=]ehh88%>8"R_]!r`c\pZ,G6[.ZM1N%umE"ZqE14H7.o_"bKq%f9e^^ci:/A("&.T^#_?P42_Wd-]ei0[/W=-1D[#T0$'!gH.Tb&Nlp:1S!n>s'U]Vg)UBtO)>rrbf7_qZmeCW*KmM6N%r,^tDL^1\%j79RK3$+o;$.)9!'BO;S:kJO$r?pX_;1:*aMAF+AU9TBYSgV^8YJiXjTp?_-2>HS!\M)oh#n^pRRdGV%qNA$Zq5]Ce"3KS=B`V6<%o!b3.[3]Ztc&Q68-pU]u*pgekf9(H]-H)u^H]g7Do9Hi`kIq$o?G&b75Q@>!/C`#;eg.'hd,p1"<eBK@fcQ@/;&o/\$Xb=Rm6;Qi%p=o*phQY$3`iL\"-L0N8,enb77t:[_<t+JfO=mrV*a0("U4;(P@XW(_rn!?0Z99)Ua0_MQ\o:)F7u5X)[lt\1+hTRl6nFDLH:V3<%qSm6t<(1+"?HINjZJ1/65UQ-OaE?-u%ln!('>9;nTuu2!ea$)Eb$T@B/YZ.ik;r`TX@8X@a7XN<)]1""8I1MV>7U;@R+Ak:EETBq%H9dr3*30<N'^n)o)WB083<aV06O7C%GY[%/P,ET>cpul1gds"S.`Fdo$IhD&Yo\IY?PYgG69k+\qj])fT4m#opEAKoi3M:MY;:ki%6<u^$2U*V#FV6h27i(YTIrsQ6]j2>5q\`7HcM'AQ3^.^c4RLFMl:I+RSf@T$L@4NjK_l(E[poMBB)`+[o4s<NBc/")bbJ\EQ?sfG%8,^HV:O<_H*gP+;0tmiR?s<Ln%;IqCaBRVL:"DCA:X?7uDcX=#f8(]7?a\0B@Y&iSN6+r+e*>`0^#1j,3H"O4+!b`YY:naTW:k'I%+Y9I6I)icWC-C"Im;D+W@CQ3A;jpk(mT_Zn7udMOnj]\5^@'73]s@>)9riPdp$8l2dqg[dH0dEbs17Z(5IRN1rp=(;`E7h/j7Zn>%[uZSUKJD;I%kiDkYPRJFntGU+CUPHP(QTYVqp"):*FBslVd&$A55'Gj5B])i@+`L1c%"P-=qA+0?F,n6G5U4[B(t_#c,Z=R\F/Xa%7[M\ZDc/B=8`.0Ec1]IaoBNIYN,">Qlh741GkcE.PrA3Hn:!09pjRph_>W@l3+@EG&)2\=K=r?hp8C<(^Q7bgs1b5Iokm"+[uK.n%om^[_a+)uRG$;Agq[gjo-1X,6s"M`j[tLg<1=L<k%Rp\HG15e8qu>ppVK]Ub1OPiD"5%GhUdmcjOj]eA9t+?/!Ho3BQQOu6j\H#9%/kRg^!f5BAZl@gVQhrp7gFr$($*P7krS,*0pPfs[1[moO87K;!qrS'%lmPY9>g-j3,<t,/*CPVTs)']@V5:kKk9"QT-ngp!^)m"f%mH[79qV,h3l!<>`=^EL.*T,^<[$lFaV0lBC]K"8"qXpQCa+WlGr5_^2I/5d-]VQ^bWTYF8UO5o;qFrDG;sEP%&gB;2Y=hMNrUR!e%H&3;p^3PAgV/UfL-[A,<,c]um**nl9!cp)l?>1NepZO(^QPj@ks$_fF'\?BMncA\RU]5ZkWY2G,<-<8dNc&m&UQ&[Zr\-iFSc.;L%5IMg>nDP9]_#m]">=,<&k5Xt/WM)^g7cW?5rCCHr7kU,*CVgcjh-M6E\C(7ZY"oT%hfZ)kWAe1LBE!26C=DQ=imZ`<bK#'q</h&\%?12qUs6hd!L@uk"Y'pu?m=O1l7k65),7*btU]:'U;sqrDD"fR]C34g+M"Zk.F]*m%<W?g@*rWYumq(!a'AZ8<D^<$KeUK#ig7<Dn%!+8tNdX83U5fU"<nF)q"jXhiJW!2<Qa?^aB4.aC[q*f([C&+A-#rNM3L$!m>\84$\+TB_frGNnPjhD.d3i`1K0cJNQ,#,Xis6o&[%s)WFp9KFZ&7$)[^@R\]7J"/-)/H8"'q>UM]p4!#$5?Jj(S&q>T]"RrYkJ_o$@<q*)ZdHpel`]I<c*&>@("E0U1>s@XElbomEI6OA%<Ff9>`II?XP[W&:B-AJsO.XGL7AfVL^O$m;5;kQnS7u5OqP48\2h1NI)mdVe#+t]%&GXK6N]W<XX!T2Js4\h`aeaL]&FQ%d`\f21%cQ.f<b]1;*p,igRYU`U3L;@hWP^c;ODmNYskVde4mU+4ZkHALl!H*s)rW?6(gP>?"#>3r>bMD:iO^Ki8p!b?MO8[XH]34Rp]:HQG%_92`=5Q-]pM?gUYeSYIAm)?`.=8bn'I+`0jg/lP8f%%&:M=PMeK4OZG-2%fSHsR%i^noV+h=<k<pT+4CgV3Vf""^;hAp`]!J(H#/%RjLtG&aq-JR[Tp1_>)i,UYEQM1qM9A_A8,7,7o0U\ZWl*EVS19TVh8b@[X*2B"+qk9RZ7F=u@.Q(9,jQ2VPj"#,1P:h__IilZ2If%?d41$$TfG6oqpJ[(7eC"Xr:N#,9N7:'(V9rY&F2sbM1Tbs6j@GHo+aEJb+m\$Hr=+p<@+-VHH+J4SVQ.oC_%MhetBac1:_kcdr-l%hn@)(%D9Y-mFs-82kL6%g8bH\b(JuG6g$j8E9Vr9o$Fn\:*A2;UN`%Ql907cM5!K*efu]i#cQk]iO8#;h^]iMFp%`J^.YftG6.md%U`?lAd!23$oPX+>>E'3YeBGo%)lNL:Fh62LlbNmoQell]Z.j$#a*&h@7-3/]1R_("G>1u$jBU.kIo.DjTp9>43@bZ[)Qm9H:TJb'%m6d,9fc_\7<<:_"-Xf%T;5P#e,>rm#gUOs$<]&O^*b.c<E/a)DTmcFFor^EqW185`NqQ[Ia#PpmXF'09f]+AE/d>Hm+:#8NGY.#6%!0c]C6;3sh%^I6K(uGfq&GT/%Lb041\!l)M%%hdid<`KTX*WV"fm%?+)4?s8EQmK&O2np0TenFnbes*:h/9V.&*i,bE9#s:$D(&r%'/Eb]iLsJh`=$7W/^e<jea.L-.;@Q427oQYkpU:q?.#\dp.&p.;>20'T0I\Irig.P'%I1oqR^f?0^[]QZl:_'+giLImA6^^&$=L[%H/!'LW7U6=hY-CW&,B5%:3TO")5qu6l;k)LD;rH]#b.?XU1V3E0CdI7:CPpU[Cb&@:)DDC"B;>pP;q:":A8+8&XKN;_BIW6atf\m%)Ioi<;#OCuhI"rGHapW$X-0JW3b0rPiWk-i_Y#JN$nYZ_[NAmB<ARSD*`\&q_9sR"Mp.kZ&;f2NIs-QGK4[mdqiHMp\O#jp2S-RA%i,V6f=nA*G.Dd58<">9`J[uFO;4r)s;-97:Z%LnkO1IU<@+5AF7Rg[VG(RC:XNAe3^O"^^kl0qUo18VL=+tZ`r1KCk`4[Yj5?M3.%WYuJc"#^,S;!fU_$]FeeRQ!YP&_6LJ:rF?tXX?#=G)P2BDD+buWPX=hq3GWrQeh8`IFYg"YO;G)b@,*n`D6H"Y779/S>;1LMsP=Y%`tRMTIrs/-!sDoN'HBK`WYP3gc>5[fYC;a$G+5t-UuYBC\*[B$mLYsYXb>t0No5mOW@Y=/N)B-g3)PNldmEsHnh2o0<(R9'C7'P8%h@(2E<9LH@mioGGn#FcMqJ?\DQQqTfdR3?cmi41G3`k]T*_<8*T?Lm(/X"6EH\f][;MTPa0Y,U(H">WjKoO';,dgD9n^=%pT$G&R%c+f^L>R#Ct$bIOj9"T@9ZLG'1H%VfRdal^Ido+#*)ubrJ(EQ9E=6#aNZ!Ip,H4V,4E[X"D9d8^:o8R<9:sugn3H=6@.S"42$GDt/%F+rr#d9J2Y#4b>fR.b%eWXqh]g5U:1GG^%:mQdm_gmE>5Lo3&::8:TcAc6TF_n'HHcY%E^&'Ltb)>9f5X=9$H5!-^$KW'^jr`XW7%0G8;Pp[5)t"U<#h\mM]NX#J:9)>+)Z*0@:2PoQ\Uq^PKl#te7#YbrZ,GktmR_*dK<Z2L.3A4Eu`h<b<t,OHJ-N+uX-%Gb>(*Tot(%e:cZ8kVpt`rO-d(#h]Kb,B/nC-c#LlE5l<SBKXKMrCH],JEPf?/YP:1![t2nf62?YF0c1s6EB^Yjpuh<c)8`2ASM-ODZ7na^5cQh%nbW3i*o(u^r8J[!oJ[lh)k0(JmCSo*+'';L5F&S*i3"uQo"k/[0rscE9IqejIje;Dk#_"X:X$QMi_D'&\trUqIT@iY+.&$9((O(u%-PhsL9j(X[S)Ne[M;%<CUSmbpBQ0Gb`gajfX87RG44Y56rlaWH+8(Zm=]_cD]?8DfZW=)J];mHKlO+6lhQH7V]iA_.p#g)'o>UL3%eNNr,Cjr@UIB9WRY?\&JlZV%K7A"lj?X'&t5lL(S=jrWB<V:caMBFfRBtr9e^?U-B:)8#<-0&+)&WWsUeGGlFn"%(Wb4SDmHThk-%m=%u[YGlC%EIN%Wi[%Bjf4FQV]$tf0%Hl'<hfQEbU8Q<qj.2cc^E&iZ:[`D[rba@WI]oVlqL.YbI]8Lo2XJr)h:o*.GPZVpVV>$"%h=OI'e8o+t>Fl3a/QKZ*Hd`?-M]&(S^LeD5B3XVk)J>s??(!cFm<#X_D3ZSLp4q=FBld;>+$X[UFDALf*$)5dB6F&<fm`JQ,j^cX%''XRdEG^$rZ?hrHi:Gh8bNne6H9)(5rDgUTc(,J"?>da6oSbL"S+cOr\t'jHe`p4Gje+M-SJn%"<;QU*T%U*r3h5PlSVEL_h);k%%?WK@%FBZGbg=)@Zg1bL(S"A0p%RI2forO?@f@Q3B]kR@T2m(Qsit&OQ47hV#\$Snq]">?gG"THd=*<g';tj:<VoICKV>b>p6g@>m%lb-Ab];8<DBq:P>b4`^4]8X:(0;b3tCPNc`SQP1N*fd,El.c8`hq.&JfP;-*e>`CCW[-c=Df;.kSXqFY,W`>np[::;Vd&>.p"2sQ%X==$R\'23S99nApcC^\VpYrm*h'P3HR-WU@G.Mj@;-VB1o]rT!]\MjnVnfP?JG0i*pTBtnrR=T'0Aa@am.B-0cJ+>c:;QacY;PFj%oVn#]i5tp6O2j2Gf1p(YTD$f1Au@$29A;&dZrBVbl^m\36!qh!oZca#n"5*2Vfqq4c/i26Vo4eHmD[%js)SBpcOK!jiQ'XD:>[)K%r'&qa4dXme[sn!5G7+.$37n&&q3S!^S^s'apO?MIGC$bWg\n_?X!Kg'?F\alhhtM>J=W6fcgR*Hl*N1uhi8ApS*o>"Y6I%Y+!@#i%(U%Gc5Mf`Y<F3FFkpGTiA+%7!fBJhfQ]O$WQ%O9-GH+B@cKrJ2X`f%MDdT0d`NW;+`FBJVeVWl6<h29WlOC)8o8Y>l^7!YX8:Ynn%]m_pmSUTlX^Q!egp140QcH9AVKt:P.A;)DrU:pTt2g&;R9Qo.'I5C23])98\TBXYC7ci`ImSn[WZG4_VU)06`Mm#;8o'6lK<<`I$%c@%]ug4-k1SSA8^\\!=D5+/V<YLDrX35h$,:A3#kVVZf=9Y=DLcfb0CGGeNm7doP0g0Im5qSGX3@ql[$dl>RsA_XNV;_%2GTZuQC%Y6SF!V;6!4mDEj(B&[^4qE+YiUTT'Ne">KF3O*c&H0]muh>XIgh7#%`l$)ldDl(VUr4MimESn?P\$l,mST/lBkL$U6Bef:`oBqP%%92]UM"_.AO<3V[HK6OGa-]P<6Wu6+gc[;b+rk+Q,)aJ4hA+&qfpN@eAl(*NdRe?25rU.LJrV+I95+@#qh$9+a^O$c$o,79uJ)BS*%,q\0FrL_Bp?.2B[HhQjJqTr?/B2]rHD=21ih1JL1r;#FF_j%cm;f-)d_6.E:XEjZFhOcoHVEb#Xq=\V#p[2SWh9+pTf:QY%hRuLm%g[2.K]J!:W[J)I5\6g8hYANVI^>HH@h#SkP?,*o<9miGe9YL>u@sM[hnp9:#h]74ah-ZS@>PgP7#bPFOR!noE=F:Y'UfQ<BWSbq5%Parmd[D4W*dnI*HAMGpKpI^uYf_k5a@c>d[Z7@T25>KFMSUJG[,M8WrM8d.9dY1HbCjBi>V/o/%3F:bF_Od)(SG"e-USj/hm')cI%o6&FIMl#0nb?<9_-F_(O=c2gqm\DbSEjY$J4&_]K#[VqQKDiQu(LuWKlGHn,mROlHB$[eFSZI<Jbj8<.Dchc4SQ[\f8o![q0#DL9%SXt8Ul#_9hbjKS"]6b<8W^FCSFR/;+pgZIYqjhW6iW/rnmF4+eMLtU$g4r4sf.ULF#Wnkh?F<PbL#"'U$uC8]n'j<YbO0JXI\Xi[%1>XV;%N1h#2+b6oAQG^gbYFjkD_'#!F(L=VZW$'4-X#A5#Widg,!OW7Q\e^B(J*09meN3Y&FU[D$e7=dd7ho97a9&mQ&,S8\rRYO%PmFk7S-*[)j6`<=l-e#g1\2QVhE/Q&qGi1I\''<l+WF8Up>H7.n\KhOnOAAFDqI8W]@'gV&>c;"Qc'rC^Xg&;2a2')5aOR5%l;fZ%P?oL!IUhVDF0gIZ(I8:I#re46m@j&th,NPqIb.FgQR5&-\%9.NM0okI%/"J`OVOjCo^\&M`LCc']:^;tDp:n.5Ca.s6c0kr@5*>Y%q:/,d-N_'hgp^(>kjg#FfAdkFa7PNXW*Wq0M'4J,^0"_"%tUYRCUfW@<N%\+@WUl4O2HOo+!748H-6'AW-eDUo.*h81ZXV:l"8WV%L?kbPq=O2bf_R0>Gk_>e#WO_%6Q5?m\U7d"?bc!g2U,eY@-'6=.3$r5Plg.j!_`>LrTCO9AqbIE5V.dq*ORUZ]e^;^Zf&P3@e-iK%J(`##HRTJ-$.a1+cq^m<Xn176["Dc[ERn'g$sek]>O'eKhKI8!SdrR']pG<gQ:dEHkD0#knM"lg^rP'*drbY6>Hjdpdb&_$<R,2O%9qQa>[m/<ji_iH8IK!\8W*]l@AIV%A2D.bA=[d<]2QPMt4KEQ^HFE;S(DB._Pege:c8VdY%MOq4%*t4$;>"L*=-"u_lLt#q##!lM%IMuUC0$epeP1&e$UfiL]npF2B[Hc?FNMSR&<#>/BY$Pk6,i(=)p\tr#]6pVg9Q&@48f;ETYdGSqhHHoGFL8R--e"@pRSnN!n_nIR%G%.B-7Uu!Sc,>U<?_."X`4-YJQiCTT9`(T%Hu\&@:NBlR-:J;8/kKk4C%]bs81Y'1IF?C%[7+6E2Y=8Ll$A(l)Q#=1E:J69c;c)u%WDjaTIIE]HdC#log8Dbo:?2Kbo33+o,^2"6<efW`T[H\e^KtF[C!EFOU+;V1dWnO[ic."\kDub'0U8g9qK2m;V>HYXSAq_0)dE-u%.TM?a2U(U1)cpiOS/]Ygq9^Q-C3=$:=Idi('4PsA2DW35c^'?"g;`C1@bbqY!NBmpXrW:-ANrE!dpF-43?efI3Zkuea],H:PlV%M%?!#ZM>2ml$b*sF=gZ-<1#_oYOjpnP)s%OemNG"*/%\;Tk+2PtG/I.rTI<8iGNK>l]eR$<2ZKS.#1?FpKM1LJ[PWG%;>bK/'P.Kb=%?o!]-rIO`%120XmW?Q*;oYMHi-C6=/^r7=P+o/CeS)bZcY3hY%rb*<_3&PkjLNe(Jp5qW`A;3fj%]NDFBi%T9!!/*K8FH6?Ql#hJ%n)^MAIcgRb/AFEj#C39kco:iqY#*33&_#g9^-:pgn!?'VU`tCQMms]o^?#/PZY]3i]?3olnuMh?QA2U$B"oaNB::uTPltK_cN)N`%P\'bpkpH`VHq\tc=MX2CmTk..,k*>q8Y.Sdo]3"Ld:DP2"!/)'C)N%`@7G5;QgEI'J+k[CF>jL`0iQT8!R@;iK\d2pjX7Psmb]M=%hVI?m-,V*-F@'mf$i&pX6bIO;Pl&KL$CFMkE%`$`;1'KhrYgA`QG4c,aUu6)o/+BcBnRf`EE.<<WCk3^?`Ff:VS+ihIfJDaYk.NB%),Kste1aTV#.oZ(\/<`U[b+-&E;BGLk[cCr".t,,bO6hRY3]4ReJkX*3N;3G-</..oY#q)HP-F*fV;aco'U4Ba`eMd#";gP/dpmq%UWK2pQPFp"0'[%]k2YtN1oo*cI(IM!\i;#M'7TZS"J"q=M)c+5MAGkdTs:F<oHH8\mr(X)b&_iKNVV5\j"k\?="Qr'7J?M2[hC\G%7i4t1-dM*ARf^-co;'\r_NRK(B109HZ1h08Msh4;,Xc/>K.N.GgI[SAA`MKQi-j[>^j36G"_5g2oZ>tMb>KNZ58FB57/\Z:dd6RU%UWoWS[$/lt>*aqsBO_GjX`p,eXY-cmV_j^Ql/Tt0JicM:9RFLN<$N(8Gk/DPJ!.h!Sj<0#UN<e!hZ^L\I#`A*T"S3Ck9>!5Ce\X;%:R2iG8su9Q_q9RS;DKiff[aKBNY:QAhGC)k!+)3h"EbFgHmfPIFo!Q9O=n6n:Wo0GA-3A?BP`tQ)hlBhm:W`XZ\Qr'+-OS?F8Cqp%W]XKO6--li0b-"HSYRGgdV*;HIQPjcJ`'R,28R,"pS$tb;bj2^T":E,NK*/pbEIVfT'mjU%6m'I^Q0Q&q&boVca3CS@1<fV!?W75%%B6TVk$t8>N*-qGfX#uY2-Q^9eFTNhkL!R=WD`*SF7f?3/"S;>Q5'4dVVe;Z;Q:.BViWaZQ\@VYBhTR]c]Nqg=br1/KhrP2]aVin%4=M6VZTh0JKqYT,##Bq](n%r8NU(qg3>quG;e<\`!li(gNO")3lgnY%X:RZ5cuc69F-p#PQe05#euf]m8`>u'(=?h^3mZPD,uT8C%XEXD!K?Fc9Vb7LKSO`pJ$]nFV0ND&idTNGLb4I&o$Du!QNffV>\X%+$T-\"3ZTqZD\B#<?35*MENJ`J'eYoH38^S/RQ]ZH0cre%:%&eB[u&V"iPc9Qb'J]Y1dgYBe(</b"'.4=nV0EMid*_n7$(f[)23/>!FM<t%g6A7^W_Gg;h^7/]r_j!<hnE]g'1?8'U(7iF&ZjaND%ANVtpq&+8V)+.3DU!(cT'C5>e3HY'7FEuPkUZBe`B@+W("eVARQ_-QFWf/<\/jFt@OY-@h*4l%V\l**%3HY'7F<'*kL)df&HCXpj%L)df&%(`ARmQ!:Lq&+:G4uPNY/fp+ESRM5RVJYM9^h79]Xo0,O86MP@UR0eFJ_M]A1Bm?G,$Nk[,AW?H%Z(HCmcc#W*K:\)T"W0g%1n>Y$2A2MaZYTgjc/o?[K?Y3OU;Zg$EZ//,pAA$F*M,8mI"'USoMQOiM9VRL6d!]%*9%1G):Dp8*5&$k-I!:c2.m:/ZAuotN0Z^d%67@Z:ITA/DpT<uPbt788C,41M;p/1sK;b95a_pW>aO(u[^3k4/a4O129Ad0L>"M)Fh4>;f''GP`R%/T\W+e<B$pdfX2M9*L&K?X`%@$/^F4WiRdW@)NQPg%1"4KC2^RNLN#0mZKtG8Lf@BK\/nFJKUL09<;M$KH*[^7Md"*RVojY-[)I_tcSWan9g\!n#J?XR;VF`;[+p%0TK/SbQIarcW;J`alCQoF[=tG]Bek.#ifUB<Tpg4:/+s[^Nl;'U`<Aqbl^aob)V#`QEJU2\PpCTi((lKCZiHJi5GtIHp_saZB6;r%_s91'g`?u<Kf^C0R44mf(7-MsK\6)3X(<Q4AT*9]4@tU/4V_FGa04;>#^#@8p(I5S'+KbeSY6@K*iWfK/T^LEP2%7^JWSi$Aj1ZC%j^SR=pYSXZ0OdXCN4f8DDN:ugnW!llj)";JF.,?4<iX[_[9gb9c@AJC<UP\o1q5?)D=_;9\.,A7iS_f6@SEGC-86Y4<>Yq#4O%Fb%s-4tJgJ3XjOkR;$AMpV\mLIEtQ&MEl>TZ2ZV`fpl@_bt625T(2\J231SIq-q!`.7bBLnD_DMpb%bCifDVC9";VqFe2L(((1S<CKD%E>7muljBH%YfsW$+XQ]AOj5kJ7j_k>qIibX0>jr[7qPkFH@_m%S0939h=3s_gIld%oI9NCLeUsh,P+C\Rs][Lg=lZMR:)(oLtQbI%p,O1^pfR^ahXpE;QK"#5UH=@2ToJK&8]_`is#`/(34`,m)6$ETcPshJPMt[0@"q,((JN*tfN<h]\QG*7g>bGmq==E>iGmmHPi[\6%ETACZ3DoAm#)X69ie?,+O&Lh3Q52J"QcMVDcrOaK&!BT,Q\W7@TaO6:`tG'R=kSDEo'/]&APA([h('DIQ_.=qb.-5#iSae]S6VEZ%P,]oW(CScgSmP/=_Ub]&-9i\I"C5a*q`Vu^%k$m$6ep\IcA-bhqo;1PLJ*\[*d9g'ZQ`?VkJIac:`WIu*:r6(;rFm-\C<HhB#Y'>%2'4Fg%HVO.NAhq3jh7F&Cs;]o"l9kGL4$MP\jSp^`gdR+@Z+f6lbJ_Te.&uW^0!N?JI9Fc-=/EsX]lQtM&_>7GT,tA4?pM#9W2>E%jNr)@,(g9ln=lJ,nN=s-!e$$^H#AYUZnc;RVoQR`k@c6R%^BQWZUao'A=0ZfLD72p7%>)+#,hKsB6oO`,O2L?HG2`72te\iE\dDl%-5g]lT04?g1nfmB]Z39lB+JKt)_eab7u#!a=)R1=A/K0;M"$i$\rh0ApX@UKVNi$2NQ0t]Ql5TUZtNA?Dem9"k7^$1PRUWho*jnT%7dB/VA>Ggs).Q,c2)`1-eFPn7a@K;Yc#I9i2C8qMnlmQ/O\5"'Mf2)U`<s:YAE[])c)4Dp;N&9o3bf;*a7V0<jLd<le0$!K;.k/d%@=ScQB8.s*0u'$@$CAlT`gR5>I;ERb:OJ=$8;55jQgpri4j.bH3#-<f]CMr#E/AcM?$-*:;W1Ne$=ckcbOU]/[*M9l(1@B'pF#,L%5/dUL7XHA-;BIt>gC)PnE9=cnoA;]5^k%Hai\)L*L(8:XMn`eI[*=;L2L;L:<+lXe-ZfAlIKMdFBJ0OPRhJ.=L_16fBSq'(4@&As%e@8J"p/O=@+Og>cor#M!V>f_(D5k:T^X`:sEj>1To1gl;C)]fa5B"8L^-1>#1Oo=BV=S3RU0lYF<-,WO5<Z2WCX]>JS"^S%]/S_F%rfiT4p?kX3(CLO2]T_P,]=mu]Fqf(+`DXKPQYTsSZBF$=1UGAG17t#!@E6E'B67n%^nKK>ZBF$uACs'/fq%,)mEA=FW:iqd0%Oi$%__.)<G%>?M:?*d2I+38bBen?N#@t9K1@0tQS.*$OHD?q^WD_W#I?`,.cJtrBml#Z+-+dID-+clSfq!#qJ+4iOFPo9qb2M_R,HK9(%3T,=ppF3FIiaZ1s-h[87:<<kOr*S;pG)p\p982Zq2'l*qkTsA1q(]@k?D,:5j\C:U'V.)D1F&lTL/u`EMEn<*`S:t5\P6hC"BKS%%^.5P5+MasYC<oN3XW#MGoIKrAiWCo:fn6:6M'pQ/o*DGLZ(3/,G)fhm4&qkpP2(k"\:L!<4ZOIe;lV65hBO)&lcVFZDFe$iQk#8%%S6s:HDZsWnLCS%^=TaA/?6GIfp+EbNT-%.)?96!\Q_,&]>3l7#@@l?'Zg"(HLD_\50$Ok3]l<#SVG#+/97K1MF0b&YI"Eg>o#tp]%Zs:1TA3Q$XNL^r$s5\"-"B^hteRQb!95A;+)a[$>VFr`1Mb2u,ZK]g2Bd0j'9\FN%\TE\!OYLCqV>49RmtD]N2I2cT4g\P9PtdV:%SuXSXe"u0S`FDEYO\M/h[!D>bRSB,,Uu\#)T:\iE[XP'q8Eso?Cq@"H99"[P<]8cA;a\kFIR5qu[Ve+NCq>`Op>g&$_5?]S[;fj.%4V_G$A^dJY=J`98e"nq;\^b37VFt]t2"kas[,$mr)#.`Ve"u0S-*>e^B@E]RO2Z<4`fWu^Q:mR/0@.tA9*7ZM[&gNCdhTsb)FHDg%=tX++H$mps!8l":G1cjhS1f%A7)^RA+?#@4Hck"]`=edMEspAJ`dM0!g5p?_M^P&sQ`FC+K@A22D.?*T5Ui*K^0<k-.#%emr@gM\%1[@&L:kM+b`!QjB/iOD,V%$"j4*D"mdhd^:=s-6TLWP*GZRGLd1:cB[;9IberS+hQ8-uWJn]XFt=S>%),NPr&+*/6JcW)]bI.Uq:%Z8p.`!rKl(O1EHUj=6Hd=6Q45q=2S`6$LYFd+_'BfQ36\$64+g`2!*No](BU4c26)h%e%3WoY7BkNBR=&dOrk("2!0beH]<o18>\%HIs0@T#I2\pP"c;LPI;*e<Xa=S]gW/=""i:n2#k@9i%Q(Ea6G"r7po'q8\Rf2`16;<%,X<4,BYF<Z1sJN?sBs0@TT\`8i*iCb^tj%bU5H_cP1KcmtT!=mm4Ngoa(jQ,bq&n`to2-4O.W=j+>ZT6NWa<mY__8ONbbuB5`KC/"*RC03(JWk@l+nAgMFYc_WmE-,I4"151KR%G&_$0'5MYa?r&-##-TG8:sSaWQ$b#dr2kK_XO\Ib_opX,d?mr_1-?bm1-t`J3L9_WJb*2hPR(r<ZcNJf.SCi21rL$QN1iEQ8Ti?>%.;s#M(d_8`/S"BN-Spln'\`$3'fp#AGin%e\`]t+[DB<d5A@TqgDMT81ZKIUJQEOMF]QV*&k>'?-UAmNM$tWsn3Zl<)b=M,r\HAe%V'$X>l\)l(^G>bH]-ia"^^53\5IYs''CKnJEB`E#*1;kWo4'g1D[?.Q4t1D$GtD.Ogl4Fse5pu-j<YO$BQE/ImY78+\hN?c)LfP/%dC5Ph87a?/?!b$1[e3fdZ*lB40dIRD<'7Fo0mT2P1+6O``\JXVOB?l/-S;rYeG!3>4/7,.dbYR%m>N3n(9R@_:AM?Nn92+p$Ps8S%M7aKW1QCYj8GVX%'`AU#(&]l!QpQP*ch;-Cc@*lbYtRh#.$2Ahd7r7sE@Ee&NG0L[XI.Z^=dMh"rUedZ=:qPq/``c]P/MIi:"\l0%[k!U)=Ytsa3)b'`E=kT'AM`J2'LTu5XVOW@.\mp4Wf%2&&A?Sn6Y&bS`UGEW1$#j&;0,u$:4HihW?Lr*p%!k2b`&bLAl6qr)hD,^%N5d5+OO7%-F7Lb@bWu*Gd*7:"ZNZtNguDt,7:)[hkM[EJ/GBTPM6,mQ*7p9uQ)4>r@Tn81RTZuJmClFJP+q^@NI=j-Cjr@UIGFb+%eQlD:Ys,n(D,d]R[>h"GKQ/%tpk#ElM@\&)/g\eO4*bLf:!8;B<KNaE2<UXEpWH'(</TeTc+ghNbY#`.J'Cu":NW<n3M*I?Sbq$.%XC!VlG,j%VDS/d2ZrE0/fV2MXa\I?H*HS^R7QQNAM040go=]tK,'hP+EVaJN<CZE6j@j0#>5.QBR[Sn"&7Y^TIWZ_mF"WT0QT/8(%51?]\R=Fs7bQjW]rTek/R+^`IrT:<LXA57!SbhN`3UbgsAcc)fHM;PDUJkeQG'IH$e+_X36mBBRde!aZ^Uti9jakrXYP0NQSel20%pO0b_W't4i8EtJ0Eo0Jd3dnlI5ILdAI`h<sYGFh&]WfM'H+R>@'XO-sU@D`=ZMEfuHs]/ii$$3;8buA-8<O"91T6F&@BpN8^rOG/%>4m"o1U&@sK.Z"Q3grfuTG:S?[$+Y,DN5K9Q'236I.QFJZdORsBR4[&L%)(*5gH:Ip2#a%Z8l_lER[[UQbl!@*i6jTjLeI-Cd7HG%oTBlc[3joON/`h'X(l9ToD38HEaE@(-<DpFomNn)p196pQJWW?QFFkN@J.[*NV%X7%(eVY[I`SYa1cJOiOt5Xk%S&N,JMe+M4Wg>%m-*"[?:'Pi^nUX66`h+\Q5uf%`'9On)S+?YafO18jF7)uMfP1Xm;ZAhEWLB'6"b."1M0C*'8dc:(B`5Sp<0Ve>]pO\]OPOJbn.,[%K'hN8>tF6*R?mX@G)gM]/Wn9A%mMkHE$F!0jEhBReK$ZjC7+Q-o>^Vo)U*]!?>4#ckFd>`*Z`ZoSC02k!TX)A23fufSu_3W^h9cV%/C.dOjjW5AOPs+q+nqVZfM[9?`Ns?$)B4"tmjJ_dHG32F8S[:=Qp+9$)4?HnU^I]JLEX>n,n$qj%U_&dq[!R<"\__lXVt>:$r&f9%PQQ`lIsMl<ErE:a!$`)U:WNU]cf#_n(OKU,?ij=`/^2$jfW5g6cA?iKZ);17`g.kt#B1g+.MEfJ3DhG=,<m=Z0RH?1?V+_A;T:LH%X+^1'ntCFUS]LNc6i#`>Ac5CFb*V6j)#p:W_bXe^a.[li,>X@*:76n.nP8(W-f@/H:qeb>h"VEAb<6qmCkqQr4hpP*L[rEs$5h:,%ELnn`_imEd_&90INT8hk37i("R9X6K2q7HEonuTtRFq.bB\V$XrURWg.61F)3nH$9Q&/H<T)*?'jLKa8?D1%cI)L+)102IXeM$7E%:nsWJ<sY"^IBHq+A4XX[orN65$=n1:iESUhjN;N+#4glDkPF:9D=IJGVk*.?J#_Ci:&mjGf.VV?kn0qjTBhiT9_iTaJ&8aFq%76W%mt-QeVeGp(B(Aeel[.3nIeeSUGBq2IY$_1-INuRX.e?o[HrDsK$@:cSrR.F;_GgE)I3.8_Eo)_Hl^-K9YPoBaoul5hM*uGMlWh4&%`7^B6e0ggQQbK0QTB_b&S`.]Rq@/1q78NUJj-6.*T&Q=,Qd<lJ$/,"$F8]#2B`]#9XJG$Ol^&]4*R@9)qRM'[r2kNKr<D,"ou(qM%nc@sHaS+D1rGlW>"IM<3F8bZRLIX=bmhp'6LnD`^r4IgW;uK23k"%_g07Sm>45+kbF8bYeH-(>]rjdLRVtuB#.rAC97]A/7F8b\(%S!-\P:Hd;_s&?aGSB!QTO@J)PI*[80:2m5j=O,qGC.f@fHc+dPI\Rn%Qf'RD44eBnfckU>?][#7b]E^aoL_9smjVCRUT6DC3&]d,%IX,\Rq&cp:a)\??3:^C2TBfQ0n+F6Sq?<u84<+65kPC/RF-UdKhp[eJK2__Xk9EK@Pt'&Eaue-,k:L<kSa2WYa#l4e5`._p>eg2%%VZEF<'@6?p8rkc_6*,=Ve+-0eWdONNI\YS]:Hd;_`jc4Jom9I+@.[^=I#KHgFRfo'f.UJc%!E8UH*1M'6>S'4T6IGFri(>qqUh"W%oug9c7#)Z#\UHtiR-1%+(LP;FWIDD2[3M4-QS0>5A8rAKf.UJjGa]8R.]W[2@Gf-DZH.a9Ll]K$V=Z52DFro<`3me#R$m$*+*\l'%>>4N@A)Te&pZ?%Glt>a]/h^h\_1<`!-K(de3DjF514fcL@1tG(B-/K:Q_k:nqS#&Q=5*+c]39-$@d^,jIVH'mr)3QB@'6!MI.,\T%;Wk;>^!h)Y\Mmln^._;gp1Gc(lQ;E>cb<W,;obM;Cf]uXa8=?1?Or'kMKQT3kJFsFhS34*qsj++?Luflhjs66q/i]%m/9'Gp&;CB%ZFtALpuu77G37eY2F%*9bkum6Il.2jkJR4a[=5T*4>Yg\l;J@[SRuN6U.kN32>^tblI3C-Ik\5*BBjpfZsRNcG.V[YO!a#'D')Gb%)i(Qk='*D1;HM_V.eSjplcSpZc9#V7nD19cp\)j@p[Ql#FDlKah'FC3iFQ2qrn3`IESc,_P"]iKS$M_/^?G9.hS&ti*]?q7P.*'6%?b4tWDgn[hn(1Xl=0BCb+QXTZl&@nLdXfqHNT4@n;ktdbf@nffM9kYak0rHB1O]0uSXOn.3B`gO?F;[@8&sA&Vgf]TXr-TM")C(k%%]*_thcdD]?iDCZR'662lar&gh:lk$a[k@f5bdAE)lKT;P^IpZ=u"nae-XIY\e.[hPWhr(]WnA-KK(!sf_W8NkL8-_Ir9=Ua1==%%GKgY@qR*`=p@C]*i3_83X7njPrH]F[4B$+WCjo$uRWhb4[m/3sf?F0T6KPI9Za79EDLGl@?)lCl)bVXrVnI4qpW$:":@At+Mk0/;%AZ>34&MeeB&J9qGRKVbFk>$MJ10N^NIGXs4RZ/J%aY[W*Os%3aU!)PC^>ua]IJ?/5CY[2l[FeaB?i&:<f0AO:ZX<HkTAS7<em@`>%FD9NWd=Enum2s0(\`f#VjYF>saPk4B'D4Dr<K5kF=nrrj:a.h6VfmRc2r;gM9\&P/a[T)bc]q-<WP8>EH554=N3oqiYcOL6aV,!C%3s>p`pZddH&+k1G8_]Th.m_qYkG?>_K8R-[]O-W=QRP7e)4V6/^+,DNXI=l:KjPe&?L8a'V:Y(aQ`hm..E^(AI=CG=peIa!*uF^T%2JXlL@/3ptHVnCQ*(=W`=1/n"g$`^[PYY4TPk<EZ`PP;NY6h7nRU&NB=rL2C8u,U4ksb(6r5l"B[<c;p>IV@Qc\O0]U!8$HT("H0%m&RRDhq@J#msY35,=FA*p@8")#K#YXE9XaSSJC@AT*<QKbqH]/&A[GYTuk%TP;c\nRTK@\ofJAN[PcgL(m'<1CltgPQ%qtb!<i%_%`W2+l:+RNY!>t!XCO=5dqb6?<g7Q:/`%mg[RkLod\*EC>j$3-fanO7H@!-ACiEb$f+=GQ!lA2Q/A3V`Rg,T&f;jQhuX%Tpc7k[G+%htIjsVV:WlC0%73b1Rtc/=>GmXNcjd<LV5`[Cih"^\-i5Vc3]lcfpin+H%8#E*PcG7[6+l+=&qKG*Xo=P<8[tk$$\SI-KN2*jOF+%rPRuq</E:7V?>fe&)NCLf9k16GYDeY?4G9@)hK^22Hl=3]"7B-;`<OImO2&r:^sFP(Y>#+qo[@\b+([`iWqfkVuf"ri?@shc(ni2%d$3Z=:+=*f5"U$Kj`p+FPL:s_0l;ZA`ToZAG.=hYqflh.dZr";L4A,?n=pWR90s;QQUcNrPWOr#f=_$U]oC)c/t5s'_^g$toV('1%`0/9:n/,e.d0@fi4VhnXV>BW3Y_hCb^:>\n2RdS5Tg)4dZhGCs`6o&;aGg9!SFt#CJ*+DL]?,?"T1PCY<5WHV`us9Mo0rYa)G9_6%[Ein'(@'6M(7>L6O")L(amVT^[iB5XNj8FeZM\q14d2JodlMc0JPP4E=ZkGf`a9NBnG/XTG(U_[VNQ!!.)9;^IGn+l4e4'O`j)0+%-50S3k>U5I0d!9$"lg(^*B@/(XJCOMD19`XmHU%s\^n%E/bf2%E>-('LGqHm\fRK-mCiiL&mKd@@8%OtGNpc5>0U:XGpW@GKObtu%2c8Wf`3^Ki/59e:mpjC6#:k(BG`^SYngr'fk;#P)A.3kB@."kF0"Ia50("k"_7VjSGK5oE_<+up"5aa$n"7IeMhkUo$aRki_q?R5%%I5]m5>:'B,#g@:N.hNr6oegkoCt):rNg[[VC9+9HXDANhZ=!`_u#.S4EEA>(gFN!95WOLbr,/oTT.PV/pqqfe>[A##7_,a;I48a%GWu)r1d"<C4<6uW-,.;Ufo5[kG8"Bj4/1)2a(h4-rm&/XYWN!l\?kC)mMfIG5>RUB^<#236@h^oJ)BpR\SBHF2g>Q+N>:_)EiUop%>OcX^(*h7Oj3,O`s2OJ)GXJ*LFgLMn8-i_(1aIdc9XK`HdD!)*$Xr^AceH'3E:c.7JTJ7mAk@7FI\[o)<065d))`.MH*fIG1iU9G%%T`V.c:Z"piG*Fd\J![>%Qb$M'Vm469>L<+lJTu&?(S"mKIkEsd8rKX`X2Dn?GF;3H0V%p;XnRQ0`nU%IP3p!iN4bkRnJam0:-V2%djOh?>K6,bI"C>EI5FVRD7<0mGA3H3)R'-BS+VbDDKPTSoA4Vua\#a+DLUBr]j@,r&HD)roeH9;(/_YU>8Jr?KtUmt+D=.TmIHA+%`W].&\3*o'!l2BPSgs$erpD?9,/Zomfurj<Wk1p0Ep9m'o.O.U_kls`@^489hKt<GFWe'DR!d(f4Wit26umrB<S/UJc?TrpQNFST%gro7EeJV5>ECr?!g2g^62^XRpO04d]rqLTC[`GWo!nD_Xgk8I/+me?Rm;WU[_lp$YL1Dm.H^7V"JK*mkoWKS)_6["6fBjdi@W+H)%.1oQTmQN<jMKTu;7E)ppHQtH>Wr6Y0p>^&h>(?/.@Df"?j]UdP#=&<Z@,m'BUi)gK3%XfB%R"aVqYs_N3Jsl'*R.QaRd)loV%8Wh%B(rNVHZRpo09fe.QI^7[oq[#lWHXiVO3N1J2`k*%pW[lr]NecH5HaDA3p(&GWcQuI0*hd:!Og:!#j/,8HC!=R'mTSpk"g3uDWeuo%Q,_r^j_QfKKsQe#X7*.*V>$Z_R@%?pHTa+\mYa03nEZBXrV0NdR"&@)Slds3h4.SH%Q(E]<6$u!:AT^?44Y56rlaWH+8(Zm=]_b)%/A9T!bOpREGAl+,gto';oD3O9hYCW.g?P8Z;>:T9lj[IS+*?E.]9uttRF'`u3lsp]_=,j0KhpU80_h2q7;(Rg@d`9f26ih)CD.)^%CRYtF(Y="rHAh+c%]!\"M0R-Y6#$&E*%%/:c,MjjNN)er0smi[c:m,o]O:HDk[A6l5TUC&"Osq;__7Coc4LGe3DV?.P7)2+@eI:)%<iq6Bks$#Y`[IRa)D_uiFZhOem,(p:Mhid+_u(Hh$W6/b9u#@gol%fda2dXarf-l4N(hS)bF3+jgM?C8knWH0],ljMmf^E>@Og.0%9-/lB5#f=(junj4IA4!"M6b:!g,o`dO&[7g/r#\KUJE@0qc/bXdjq>lg`Lr@?q73gEK/.?BpRtZ/c(/Z4&qjE]h5oLP4MP=HZiNa%H=<=nebhW.ZhDSB+)\HU(JY)ZH"l4_Q,\u6V4gujm))_)H_nm6><Gb,<-bdT>['F<q<CK;QbE-trc,XM=bPJJf=C@'al4_[3kZ!8%AU8l55GIIj\\A]<=X)'C5?('VD4PUjb-/hG-P9binm`FBGg"4K(OZPfJho`if=T.qNqi#f4[X#NPPoM&Z=dVNmDm=tqVbq>IP'u=%`1%G3/RokBmh>KPrl!Ta(L:.tG"bP7H7@]\O4Ffp*^Uo+kBt$H0J?`Fp)*tQ'[LFiH)i*+?IDQK*h=Cd]Eau\`9DY@gKaY;:Z?A*%_,hJHT(8I'Q.Dtf3^+"kSq"D2=^OeI=!@7e=(S&:p^.FN#+.d."B45\Wu#<2I)#['6WP#skFj0i/UFRrmrgL+2_@J:,8hLRnKfKO%ahF6X"!6PRc]<KGC\+,+opnUj(1)B^"#3s;hH"IU$QKAbQF/R$9E\KFC[718A*26jDb'-<7N5I>h+BMS#fru(>7i74N-hELS5>E5%X)GFp-WF_2iPk(Vf'AU*!Mqej/gVDa<DH>Neq5;eB-LQ2/=6Q-YsM[XY86etYJ*?,hct\i;)UbO%'I[OP^Vk'kU_[?7(_YQ]l0TY%pI&dY_nWLSQ\:4tB*XYU@lsLl:!Z8rH%pA;6>$[C#)g-\1jB[GWA=/*?Mbesi/Dn'EX_O7@X]JLXi6&Z>N"L)QjA6X9k!/4D4g6O%oCn<<m^$$<>_p<RnCsD[(;^IA&);"dr$GIOY_edkW=S/p%7G_MWoT3bX,2Om`^&iFfYlcjVbp0=dX-3'.+;!J<b"RVeQ^+L=99'N%Z5f:S(5'H$qd[N&[OeB1/Jaf9JeiMUGj`8^GH[<W0E9I*A5I.AePY<@\@eG!,'^4;&nGnYI!u"ohq@r=gY'Pdrtk+iq?fUD(2WE9%0"6UA[jSXEA3W$.bq2rpkOru7h-B=5VX<P]qf^Bf(=ea&J+7c"SZagQcM;-nr8:Qu18E#K3-C/tAZ7mmA\!<<&+nRihSOr4G2Di=%677MSf(7:\FbCmFl*Z@d*];JMRlOY[ULEE\ZsT)HdG'B:GqX&/T6dp<2D#W.9UBsM^6?\9^l9"'SgRdSCdYA.bkhM!>OYVM'341X%Uqe:+#BaA[4@j4OL,T$5iZ'.gR1&.9.r6g0UicUfC?ZJda1J?tZ.6RK\qE\@$C)Siqi;8d?s[Y+Df4>,NPCt=P$1o0$NHGggF]Ip%;q=X+/khMt?^><t4#`_`np\2M\QE&(p,?onqR<#=U\f7\)+CG.q^9"FjlNdLnPsjh`h?X6<@XVp#O6o\G!WgDQ^%(*5Ni26%SKDs%rnWk;6.##6l/F;npe=3W-l_9#o%.ePq&3%Xi$[qcWp<\[e$1U@n3YZiWi"J[PptZ\MkAZUr>[lpj/ZOJrI=dHdr+<l_&IDp2egdA%;7-j%/)siT9T2YfX.$2Y5nT(e,;HS]IG'@SU;X.eVJZM_Xau4a%!SJo\nea0%TUJ-*M_nuL0:sdWp=C<#"h=mUZc:4-9/PZ)$QI<%W@0GW_k@.Fl=bp,!o$PZneF<`<DAHbB/t(W+mcK$Wai#Sg"*3YW`&rSZ!<_:'r\.O&(1!GY%oF`C_q5qWaQiIg"*1+Ks!#6C9!/N%!_4t]mifTs?#EalLnJ1%Ldn5p"r4XJ`M-qJNN-H&nrR(`D00YpF^:om)-+SM;;#R3eST'>VYSur&^=<5D&s_B5]m@i!?t/kGY5EF%QQ;!gMT16`bKqdS=H7-AcPRu\*#1Jg6D1%_*(P#1+kP_F27RU>@P1Zr1E$;6eBs>RBn1e0K/Dg1SH`pK$l4b%#6gEqo0ZKQCR,[6%#0k5`<AXI)1!kuX<=OXO9aeiRn;LLM%+df&gcddY20&s[("6A3XGok?d8fGP+i%2\fd1I]/Y24sik#[p"DiVrCfPPQ5kU^W#b_A4%j!Cu^7g^4bd'+Q>!0514>)mKo822Y5S`1LMfT^0XWp1q=C/m./OH'U5p_fjl)H\1V-01f^EsXj36J9+H.,scsMGc;PT!hh1'Z(BF%fJN!1\<?8>2A`p(8t[kP&M0R^PrL[f`MBp__D>qr8VR#=,0-s%81o>>cr<pU10#'kW[b0&[].JI!',ba'9!/BWej/C$j)Z1H*n@2%PqiCkpk1/uXstdG*A'@>(l$-Y3r5Tp:mjmq?cj5IW'gYdTgZeu)@gn&9%*nL*k>]6/n:E1];e/l1`_.(X\g1O9>boYPXO35d&RZK%+=)#Ze0GK&SZ##ue+Am-&=09+julHKRg).tO"&r\WIMqgQo(/L:K2lgRQ?E6-(='Z10Ih;QHD<D;&Nde(C3EbN*XV[8>6kS''`53%"X6o8k[@jr9U[>1;@)Ml0HceqiIjZNU#?bVW=oH.KIFY=#`/=1Y/Lr;R:Cd,2*i'G2hS$1WUdPlN*N85YF)4$Lo<ijC2disWlHCc%8&oVs0UOj$hZ\MH]Mo'LF[`e0>?27nD':8@JQEEBfa=ug4KmBI1D*[h4BQJ4I1c,cp+t&%Ar91i3r"F<"?%[HnqbQSL2CE?.'dr'%HC@ef2:Z6WUDSS]Xo[+L$<<a)Ps@k'8UNrMKIq7r"3s857GOEf-*eZMN$?MU0G@2C,TV]a.ZPtfCDut/%3/&0)KlEoW._Y_2lkUg%(0kW-K+4%N+b1cU1mt!F;\;%N\dV,\&?uS/!5cOHiBcg.Oj+?9KV9;-(dnc%+=[@m-.KCh<&UK_!SD@.Q&?>q;Za2&OO0[&N?gM!%&HB/K<?@\^]]B]4L_76A,f1V>!s=^O.)XsE?<JsC9DFiCLuf9L!]r6TRT,>FP.YgOQ!"b8R4_p)9dJj67mR/3)_*NaZMn=hJg@RS%+qq$fpl.-3Y;U7^)q7U,@\KtB[tu_CPd$MT.MI]']_:9D!h(5a9d+!b/;mF@),.BT:5HIMaQOKo@!5r$j@gaHil+lh$%R=Kc;'9,%@Eoj\$;;67%^Qt_FA8%N!F9oBE"]NL%tN/QD"'ED`%-KQ'p&RjLu!d#V%ORQ+&tQaKPA#s$5o'"`3AJ10-/<TeP3kf:m&-Di"8J!%/<=<*Y0G&.9MEunib/<MnL[fCRfe@0c4e\I+afhW!R03t!L*A5!lH/G['>oD7\YN/%2U<KG&N4$M-GQaBGHot'8P*\5H#1B-#AY,%)S4*\&DhZOE1hsLU@t736?=fdhPU1/=uQcNTXlOZ\2o^BlBmYgIrQJ6>SYt`iGo[REd:8>%gW0e+pt6.=dh]mcom_m$c9=]_AXoN%?&&e-&B\?ba+E@snEM?.70SQ;%GEWN'2)k$<T,ClSdZi+TK/_]jt3T!U*#7S$D7En=],?<KisN?V&9eH[`ZB"fh42%X>>N_-p2a/%:l@@mR8lO.Js"b`1&-p$Ue=dO-Qn+;BuIHq2,-g7#ReoPAO9kI3!cKd7A:u1<I":l=!h\i3pXMgY[nNQ"qC6eG_"BZ#pY)-c@mgC%!_4KO5m>J1rg#UPjNI["mTMDh+U='\S'W%@YHn(WetOk)E!-JEKfXaED>VH\!Sc1ME$@ZK5R6.E!NUtmS1\Q@Xc(ma"VqoYdeB*X%+^QSH%!BGj4!660?lZt"e)SnV6ann?[4*n`ILl6mP%nGTgo^a470-%/oM"h0T5ao_J[#=]`2D8i+>I;EJO.35TbsN4&g1FgJLD/-%O*W]8:q=X(roSr<&#LNS)@ig*cqc=t;N,me5S_dG7-Oi]7%TM.$l6Y_i%JL([NV2G(a.R4)E85kiaPc9!a*@<q*RTUTU@4B.Vf\A%i$!DQkJ8RTQsi$++"$agYsg-M!Ys'aK`'Vh!DS8[8Rla;^i^MOOPhCLGl$umb;+g01e9+F((H=Z?n"EZ1]u<OH/rA`Q6N12'o6%'%!MsLj"=cj()*lW5Scp.)eS@DSm*5qLJjs;a\lu=b*?S65Qm<-`,8F,o3R(TH&Gj5C-&,reW.f+a_aBQ_CGGtqWshrs#9MUZ-[dcf%0g+TnTHY_"'Td'2B"d&5GZkZX"A]\OPUF`!K,Qp]>d72*LuH/`J8/WkL,p%d^hkQ?FBMfVSa[^IJhk\m8NdBP+\I:m63UnYS),s&%NI[?$H-o"o!ZH<?5m;b'K%7m9/;=l_&KqPE-l>]KTIWrOabg-)r0j%5Tm:a]6`UR<%6tY,1e>g!*,e;[KaJ[P1-/G_WCZP+?s>NR%_oA/S%TJ?!QdM.=Srb#lGSAM-X/BaN0b*$1JdK><%Kd'L!V$O"AqH`P4;"Th!T(uS5X@2Dfl4m3o,$.LKFJ-C/>tucYR)'?+cUI*%N8%bSb4)bn\6;!"!e:F.R[-8K(Pk5l&M[f'qgc6<J4q[^84P-`Yrnt;Pp[]ILc#3JQn8r^U"aU)JT5],U97FW%9;26#=QUo2:3K/%gOr\(W>c[0$!A0-HW"7#!O&F/;i#*(4ESKY0\/i]2:Se'MPWnUN/=0g\eZ8`3Xf2p!ojKOX9\:'B>MuG/\_Xk<7aOC?o*s!("bh%%/UJe^GZ-GLglmpubh,7W5oXWK6i2M;`P].PCOf5[nLQap1c.unKlmT:<HL6IQuk==PN<[Gn?K'?9Uk?50gGd;'&3i,%T%-c8,"'F%+B).5b2?ALUipmc:uTXFEG^"t3$OqsHXsMl()qf:\t[>T,ZtQ!O64@B2W+eb$5M#))Ikph\InM4M$U"')7T"X;$VT*S'CY//Lb-3%0ReiJ#n97=2l%Hf#mDmVfFi]:Jrk[&*c=Kg@5\79K_e&)KT.HsB&]m:7EC'>!(]V5_I-5/@N.@D<O;gr%\@>NU6CdYcKi[+%f&MN%7T7i#3`[e_0(WHtCm[#I.Vcn/baML4@ooS'@<+d%lm^u&`_8MNL&eCq_OeSAcjW4m$MYXo%U^^]O!\*40SFLDZnp&f!Q\.Ii@4+k%e309mZm_3`:k$RFAh:,k6OZYSi:)3[1pb!j`4R&7%1$"EV]7u-d;j49QP'X]q>*iJW7]UWUPlV(JqoIRaEjiKX\uq9%F87;StUCZ%3PhTlMn>:q@+<"'8`7sO"7!<BPG%l"4Ga3H3#Q!f8h+k(YXBu!#Z>@!d/*b(3fX\f$U5B=YG?E+enTetg2%F#:I#+j?eb)(`DdtV%Cg\4H^^@$&TZjM)06RdD3[pLs`&%\m0r(TPYFWX)WhTr&R@^DdirMMu'PC2T/.NLd,j?nA\7h2&"h=Q=iBahR]eFQfTmq,(FqB2J%D4\*<Zc_id(?h1U%gp#SWeCN\DHN+H"3^9:?u-Se'j=G2mjmps6bq'#g+%bPdZ+7*<$1P*D`ut?D(%N(*s29E/8*U&fLG@pC*GTl%6nm\f$I=aTW5usq(I6aV>JXH>TYkFEiY`rV;.MKS'u(Pj)[ZUH#C0G2nh<VN#7^Ij+,[k%?k'`6/T).@#S$6j-ERP'68`rqmi`X=%,'m.k[]1^M_"URL\`1L!TS#HBcIY[-RPB0_k)I%e<W$UZ,$e@tS@7B;g1Np3Bp58&02g`X@_8$F:5`C-Y"#LI7$1uqQ@qm7Q2h%;%>81&PiY^\((&M<kqiH9Tj>HEe/qE`F7=A]:NTDkD?%n68)F)-j,Llf#Uh`jn\:gQ-!o@M8%C,]=5ZP<9dh[D43hiBGOitBACnDMq%(/]e=KEB3sh3:&*o^-K66pX,E$Z%t0"Em5Dj+F`sLih9iU;[i@=TfBQ#W7SZ5HO4"p*[/aNKdPN`]BWB7-a[I(eHnS;<5OE%VW`t%/J#.f4'q!ZJ-*h]3)*rU-N&_J,*i+^OXVckO@?NI&UPr^lf81'CDY]TX[OR2-*Ah@p8H:`r=Q?a-U,*gR:ui3LMIMk&^mEeNC60"%HFUD+2kW:IG+8is\T!?B!SP#T?eVD=hX$'H*#4hNYpZ1)kh:V]`2>R2MQZFRO5R6niY%"TBCCFgU=?&:AQuPe@!%7"aR5(S^mUmq%&R(qB)`k#qC:K#Wi)?'PKar_G#gHqg<"8'8L%SlQ!M/0f@O*3TC^?0g+&WskO>`s@7-7qoL)/.'$hpk=TeI120RNr>#)D+]P8@NY%E3"cD7IW&a.lMP:S#DGN#NEjJ+uklV-_T,IA'$(A5VK\pP5$(ECo6Fc3ns#-0X*UL.=.6g29Ok9Z:jehA5fruE6.N2:Y:^?Nkmu5%5?X0Vno_'&-)RB)6-2=E+MF-[,r6#`&Q89o=r8+rCOQRq_fX8aOs#EN:8LEh:b?UOGam5lC3H6sckL3=</[7.h*(+g6GJ0i'##DS%^dq(d%?lW\8D8\$?pZoLbY!p214MR):dXfM)8ZqdUNCFjMsEiHgk,Q_jAhuYGVADTK4sE\1Ab4)WJ&.l"dECB#q-'9\$37nC)ni,%>ac^hZZt()-(#I5YcWLmW:meP4ug`Nh&fn>oVqraUbu><JO(0+fbQ$a`/*?&)8IpFqmI!$3#;F9-=$#>E":VT-eACb1Nu_pBSfE$%0-36lk(j2hWsJO&TVTOQ0L0a+%1H$q.>imR[LfUp#gm(R>$*YlF`^H?i]0FICq\h+KBtEXLR=)B/p=qG-`7LW'8(F1Bqtoa632fK%aM=tah%&"jC`H@[Ta2TsiXDN;BTD*\+o$rQRJ&845's,bi4amki:]lth*mc-98Wa[?\I_q/CkQh$cBA>(lQokcH]3F,1..lpNSjR%bW_gs)A1J1?V1>IWfRs&?SPs1g(.s!5NJ8]jE/Z/Y0TQ4#tlWIU_4@#"n".C-h'Idhjub3>7Q0?OTQ1,)/@qRHqc2W#ZeOB1WdAD%OJcLum#pk@):[Y\nS;Na-I\UpPKbr&[1"6[fX5Xl$fI*uL*_42VTG@Q,"!F'M@GLf$"pP4!QUWV0-SQt\^Co+#DNKm4DZI`@$aT4%'2hY<U1R1HX:!,WM4FP%U#,"lU_;rOn4#bDU&d68?n>Cc_L^:W>?PJUYbqPT0X*.-bD$gX"SO@uGAFEJAq%P2G$'>5U6"`/fTGMl%Fd06;-k>6e$uhq64ecqX0ue[B5c4ZV,ip[1!;$_#N@7bN#3JLYKTS2mVm(nd,Xb:uZ&l[3.T9l2ZCN!bOcY0VV6ZmuU,k8ePSTZR%CLC&--q##M]`6c8$,"T-U*:?LEgdZ,Q_NKLOg^J@GVW8D3='s?.KKtRq[sbS/4()tbCCT=i;sd(%,gZk5,&;4>)=_bU1+M@n"YP0%>r*mCThXDBo1RGcm]m_H2ENff'pFn)q?$)!L2>R0ZN)Y6.o'M00as!b0l13GC'_J&9q\g59='26dY*`Ml_Fk]_DDmK3c!Z"NXF4c%6pi)Yl+5.J`D(-P=S6Xl0OM_WLei8Y^_nA3ZR%]giHf0pCb(8+JS*,^)U/p">bU<un/Bt,/-Km(N5fE2UY)/<81%alUfarF`J(mk%R(=ZMBSdn>?kp7&>R<I/o:AU"B,7"kj'o6uE7huuY48[#.\SkAnjB(mhE;OV5uNI_4u@LZ%.QaW?3W^5`Fa[.E$^5bHan\h?L4/j%D9!6<A/q)qcAk"r_9q=\#]M_!b=nC@@VG+mnZHHPSXr`s)Og"I@[k;e00'%6+(MO!DJBs1BMtoK15<9UUj1i`LerV4UB9$#d$A/R%)YsVD3",3PpiTs^o>ZjNm5_s4WHuG=gZ:eA"PfP!p^AnQ=mppW:cRIRP`6/4j)"0-6X4i*g<:]UL3Va_@:5!pK<7ea&M$=3@ZN.s%d+EZ]?l6**mUjKi*!3/8e[aU14:/S6('1<!`SacrM3d'[)SAjn`Lq8`H\%m[%PM91Gf*!^LR<`Q=L&:do_*[c\u_.X(uid%&19_3%*f;UJ!ju#]+:MI)fIR\oS$dLiOAGpZi/g<FSaoMb)6kNAN*h+>)I)pb_`G5Bqf*jl'X6U8*U0`p4lfuhfN7)b!btiH7%4gu"a/(e%P[ACKUZ6TMTT4mm;b%bb"\d,g^f;-9:6ZM7Tm$1sWo3i!68OHu<)mq7"Gd=kk[kN1'eaeUXC?Ih4[l)/iLdo/(&AM"MBhU!hL=PA%2E2)s'4fgkd\)-Nl`c>PV6@h2!&q';?rE"sd`#+>[_nTQ$MNui5><>)Ua,RUS#SlJEj-:8*d4E\$rT`GB7>E5KBP!T*Eu3<i#N4Y%baI]/c0>poWaP-s(nSa:F,Io<10[YN$P(I"\DB$C?t*nC6-ofN#\kepbV']=;,'LW=#HS3n3;top3?g8hXh,4B[Ji#&pnUpkZYX-%*-jsT1h"g@r?3ED+QccO`4'^i1C--Ci=->^W,aR(lKBRu*:Mks+Ap(cE=p^"=M_5oO2Ji].q"-h`T*8/4t&T1[L7B(QlQ;f1d;*$%#nFR!$q4\%!<4ge(qRQAEu!Sj_(GggPt49oo>X&sLA?]2<1X!KMTMkR4"YQO>mi!Y$\X_'AJWq$+]s_0A0<`k+Z'Cd%\ChG.,q)I%Aa'5U(Glkt\&f@`B>9Rc82T\r66`_1aAQ,/[\Q*d/YXt(&k'nu"pD%!"s&#CVZkL>O[)H9$%rs]Lom14HI3EtGIN5%YXU3Cf$If#%%V]#r%6=39@0$0:+Y"<WJ;??(J*Z!G#LJV?>2UJTCd4I:)"7L2lc4Q&9dM>mi5pQ)c0#BMULDgf[XhS&5_i\KnUWT>*o>7d<Uia*%r5.R/Guk^bcER@g0<s$Xfh00=$II$32T&`+=$T$o+en/@'b2&Acuhab5X$B>'S1?Q(`7163J]mt(mJ^UEBWp8$W1u\^ha%1KRu1T%#D%.N))2E]ApQ1Cce.2^GJ:9E/-f$]3fHiS6\7LHe;+X#-V2DN2630$.-P'S:lYTu^"<db\$^Js,(/$9`R?^b)@Z)WBrF;Vb7PX8%3X=Fs;:Q5C=9DqO_K??kJEk6/1QC@DW#]"\_GH<?8;@3d@t+cqSAmht9\C';^s^efF+eh0o]YR$`upJcY/skQ+GUR7h:>$YQ>Hk!%*F0=CF<Z%'M\%Th/-2P@As=c'<#kBf9@Od^qPjX#._LM8Z3ARIk`V6"_ZPpf'.P8!Fp1WqB%;\YG$f8$KWM4?aaVA%gef6hF[.p4%fMZLX*S=#@[fd70p5$p!i'-'%q8JpOhKJIb/Ss9!jiA&Emm(%YWu7qInuqP9B"P_0(AJeG0A(nE>R4rLmFaPe1gjaN&mO>!(^W)V%KNA64^g62n%;(V_j.KiU]/1#M@)"8*L73ejE9st!Yt>9?"`Qm-0a(,P6<Hr<.`@FjU=abp63pi',C0NYnFjQXOXJ&e7R2t&11UM1%geN&5dI];Vr3Iq$5>C6q%k98=;ofF7gZHb/VB-5+L;QECa;p7cSS_"F/h4ZS_gTZk.epHl+atC_"8K_2L25pML-uS[@K)eb!Zq`C%<tKamH!CC_.i\V+$\L<=`k[5*`.4P=D^R)eo?rTW=;%5gRiLZ?$M4m8+qj>&O(Hq&0/g)?D)t"2?EfiTX]V4FfWV$]ioK.5Nd[.Z%R\L*6/[S-MW>:_k(Da*<\;h,nXXL>?L+s@G39H`2Fkno7Wgdj%W5or-QPd9:\6<3@#<'2flJJ@i?$e9O@$S"W=(;QX$8hna6o'#_%!_@@JnDT%@,i[TI=$Cj\?1qCulP_m8;8%/qIO#rJV@_O=c#\"dZ6X)fSm&l31M0u9[b4@2[l1H6L&`[Wncn4p_AGl=j%r/LY%lN3%8]OQN4ecg;>_&s@J=dt($],365@MOQF9@!/Z+-qTn.R?5[3+?TL*phdIY*q>71:-t-b*2O4i0uSl7:d>kaNE$^eJ5&l\6>:-CfZ4%5"9-3bgI4N?mdL'1a?NY:qGVY$6bJO4u5M6]K3]"'j311c?CL>,0G)E:4+8[fa.ihl/K#_QE^]q$ht$`f3)k(:N4QBH/U-,BnKG+%ne96qPbpTmJuCsn/j+Ra3UO>"^eZptcVPka`:Sbca%n\'dPV,UJnr=`,Q%]1bD?qLj:0ke/dtA]M&QoO2i1DGQ]J)fEENb19Se$J%@27:MqP7m>&8#<j_V=,Yge@8*,3cm`7#cp\ii"\2PVe'iYTldKYA5H/PS>L[A05[X*\VG#W8KtGoj%]0g>\KMpWZRr)Sqm_kba5#%D-5XSYS2Ti)2'7.GMkTi%KDT^Aet<;rdBh#k5IBb,7,15-CbO*"?1?PlTL;4F2JW4aqg6lU!ng[;a^b._@1Y3:^,^.05;%`XKJOA%B5(]A3K-LeA%,=0>!b6,/M5EB9St0()[HFQiqHMAEBH`!65nfq0i_frD!#J=^5[VjKm>,M[-?1=Ycl1#7-9r)H=XO77KlBqrIGT+%^,8\Zi+q=kn<;O3$OF*"("_ADnfcO%J0r<-&F74D3udjY`!kIs`7#F)bDI<-D!SnKJA2+H#gf,&L5G.3)c)J""QlbR.m@L94Q+n8%,5d*WeL&pL83iUF:O\O5BY6&7Z\>5!>R=']5ur\\EI'2ViUEo&&oB0%F$6E<ZjLWr\1.TP]fNfM$$;lKQL,l4C`nYf<$b?D2%3J$%I]Doj+:1V:h\=rFiBAgD&QS<.m.-!CJ9RRC$[*4Y=?*K1FrE56"d6Y^)tBAokNY_n7mom.R]q;.ANJ$s*):&&/HS7!c4Ap-=):VU%8J?)[?L3H,=LBYAU"QaEaICgY^lcW(fBb>6i8ARUi;*d13q&RC26_-ORlfC/QI%?3]S'j`UI`fWmuXRIJE=rQUi`TWh?n2C.R45l%c67)B:kEP38)hE1-!odgG!gB.b.rHg(_QIH%+,J8?"hs<(?(K(hBWa<(87fr`,&<)hN"]"3S?)d-u])BK?Je=(Y!ur[Y2UDbQ5gW%WpDB@Os07Dn<gCuDR1e#4iW0"%Tk[ZVB\E,ltjtQVC-pCOB>&k7RT2NNVF"(&f2kfT96lf@s\J=6eLlV/1W,_%A4&ah=78n&Yro>%Jj)*WVC:D/?X<t=6K/_TX5Y-ZmugP!m>UNuCTG;3LhAu;[atPTJdu&dTqN6"e_ur%Dq%4&`\g8Olf'JR-PU+C,/tYHN>``3cm6*;%nH-iFp+&.J5VM9/RY2Y*S5TGA<4uNj<D7W:R\rGtWtj44`*F+bTZOWiU^qtcRtuOIPV/(64A$m$6-E<rkWErYlNh+&97TG2M8Wl-%_$o3Aa3g?s3P7i_WOr:?p2;X&\,lLj#p$/Z@O8nQK>O9O<Yl+MK_5/b@n9.90IUU+[O-VbF@j0P3P(M4#P\UgJu24Hk8+Ts2KQ)b%L4j805Y$Ic+;c31VKeU4i$7BOqMHg7h@lPC@1CE7g@/<sc%lN5q`n,ITR_uQ,Aqe^*)u:Wiap%j/?*PTeNn^@E[)S7%2(K$dDjc=%9;D*eKdCb*_9N7';qds+E;YSD.>-!_iLSr_6sKBJfZB+HFBeHn?reN0d2"kH).GWhi8WnXlRQdMS"t'mCZr@NGRb#!%QEi._55,M%JCr=n2>3J[<h&IG)PZ#+5Q`MA49lZNLDY-f'>k(bgb3*:ht9ZSYCmJ;e2`-`2d.W6%#%3oJr51O89c%r&8\AH@S/^%>J^te/rORA%'13`[="kp=L#]-@,Ih>^3DcQ()R+S,qZLMiJ8eLn7(ba(KfB(J*pJmp)?cqISnSJ>(Q8KfeGt&N_\KWS3=:R7"C4=>Z8S4IcHun!%3?8f6.re=Gi^<daUJS=jUc!ZJ*&N2t"qXF^71Zb5`)3eI".L@;R?K(A>Oo'3=QIO-N.9+<._Z,%L3QgQ#&FUCn@P=u/BM\3$jgoD%`/R2YKO?Q+/*+$%V1U#0'rAj3*B(R$K$t("g2$1iE2"U:LbWZ(\I`"5Os-"Si/6)G2%u;rk%XG@HWRkQRK\>c]Br.R=n",##"2[>%L!-6@`!10-K[$Y'eou+Ne&k0-i/1MI9[O;9iWTIAFT>9kr,iNhQ7[Y<m+f$sN7DKHf*=G5$e%bQ1rs1T0MoN=.UG#_D<RFt"i@Z%%<)5OJ#%i*a>Sst_E9NpP/-J2DnHt(Ab.]?hpWt"ekI`bmF&(?lQFB<%>o:#M"lSL4)*<A_Th2J+YW=>c9KfnH`*"ne\1WV@OUcL'%kP,-5&3?cund+::<*ZMbCga#kP<OCB/V<kA%ma4;'T&mo(?]4A1;_)H+7`abjHaFjbGUt*q]#+'W3,bN^F*c9YuI\B2/\j)]8bQG%ZWk$*2?%?V)sqgHhrm!@kYCrNg[+Sph>b)dL#S'hEf^Q'$V\+2WiNlR0)u9BE3T~>%AI9_PrivateDataEnd